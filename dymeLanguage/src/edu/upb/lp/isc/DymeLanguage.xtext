grammar edu.upb.lp.isc.DymeLanguage with org.eclipse.xtext.common.Terminals

generate dymeLanguage "http://www.upb.edu/lp/isc/DymeLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Model:
//	greetings+=Greeting*;
//	
//Greeting:
//	'Hello' name=ID '!';

Programa:
	(func+=Funcion)+
;

EstrellaFugazMeteoro: //If
     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
     ("Meteoro" meteoroRes = Expresion)
 ;
 
Funcion:
    'CASIMIR' name=ID 'NECESITA' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
    (instr+=Instruccion)* (expr=Expresion)
    /*ef+=EstrellaFugazMeteoro*/
    "GUT" (returnTipo ?= '->' tipoClass=TipoFuncionOrdenSuperior?)?
;

LlamadoFunc:
	funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)? '#'
;

Param:
	name=ID 'es' tipoClass=TipoFuncionOrdenSuperior
;


Instruccion:
	Asignacion /*Falta */
;

Asignacion:
	'MASA' name=ID (tipoInferido ?= 'es' tipoClass=TipoFuncionOrdenSuperior)?  '<-' valorAsig=Expresion '~'
	/*'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion */
	/* Preguntar la comparacion con null, con el valor opcional */
;

Tipo:
	tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna' )
;

TipoFuncionOrdenSuperior:
	(ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')' | Tipo)
	(returnTipoFunc ?= '->' (('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo))?
;

Constante:
	nombre=[Asignacion]
;


Expresion:
	ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | Constante | EstrellaFugazMeteoro
;

ExprConcatenacion:
	'('(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+) ')' |  (Constelacion | Estrella)
;


ExprAritmetica:
	'('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+) ')' |  (Planeta | PolvoEstelar)
;


ExprLogica:
	'('(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+) ')' | (Luna | ExprComparacion )
;

ExprComparacion:
	'('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
;

/*
ExprSimple:
	 valorExpr = ( Planeta | PolvoEstelar | Constelacion | Estrella | Luna | Cometa )
;
*/
Planeta: /* int */
	x = INT
;

Constelacion: /* string */
	x = STRING
;

Estrella: /* char */ /* preguntar como aceptar solo 1 */
	x = 'a'
;

PolvoEstelar:
	x = Double
;


Double returns ecore::EDouble:
    INT '.' INT
;


Luna:
	x = ('LunaNueva' | 'LunaLlena')
;

/*
 1 Valores de Planeta como INT o nueva descripcion regular
 2 Esta bien el uso de instanceof?
 3 Esta bien usar comparacion con null?
 4 Expr simple se puede usar: valor = (STRING | Planeta)     ?
 */