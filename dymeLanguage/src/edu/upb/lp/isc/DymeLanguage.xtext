grammar edu.upb.lp.isc.DymeLanguage with org.eclipse.xtext.common.Terminals

generate dymeLanguage "http://www.upb.edu/lp/isc/DymeLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Model:
//    greetings+=Greeting*;
//    
//Greeting:
//    'Hello' name=ID '!';


Programa:
    'GALAXIA' name=ID 
    (prog+=Instrucciones)*
;

Objeto:
	(CalistoMapTipo | Primitivo)
;

Print:
	printTipo=('Mensaje' | 'MensajeLineal') '(' (val=Valor) ')'
;

Instrucciones:
    (Declaracion | Valor)
;

EstrellaFugazMeteoro: //If
     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
     ("Meteoro" meteoroRes = Expresion)
 ;

LlamadoFunc:
    funcionID=[Declaracion] '{' (args+=(Valor) ('$' args+=(Valor))*)? '}' 
;

LlamadoMapa:
	decID=[Declaracion] '[' mapKey=Expresion ']' 
;

Declaracion:
    (Asignacion | Funcion | Param | Print)
;

Funcion:
	(gusano ?= 'Agujero' 'de' 'Gusano')?
    'CASIMIR' name=ID ('CONSUME'  param+=Param ('$' param+=Param)*)? 'CONVERGE'
    (declar+=(Declaracion))*
    (val=(Valor))
    "GUT" (tipoInferido ?= '->' tipoClass=Primitivo)?
;

Asignacion:
    'MASA' name=ID (tipoInferido ?= 'es' tipoClass=Objeto)?  '<-' valorAsig=Valor
;

Param:
    name=ID 'es' ('(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')' | param+=Objeto) (tipoRetorno ?= '->' returnTipo=Primitivo)?
;

Constante:
    nombre=[Declaracion]
;


Valor:
    (Expresion | CalistoMapValor | ExprMapOperaciones)
;


Expresion:
    ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | EstrellaFugazMeteoro | Constante | LlamadoMapa
;

ExprMapOperaciones:
	MapAdd | MapRemove
;

MapAdd:
	'(' operadorAdd = ('+') mapConst=Constante '(' (key+=Expresion '->' value+=Expresion) ')' ('('  key+=Expresion '->' value+=Expresion ')')* ')'
;

MapRemove:
	'(' operadorAdd = ('-') mapConst=Constante '(' key+=Expresion ')' ( '(' key+=Expresion ')' )* ')'
;



ExprConcatenacion:
    '('(operadorCon = ('++') (exprCon+=(Expresion))+) ')' |  (Constelacion | Estrella)
;


ExprAritmetica:
    '('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+) ')' |  (Planeta | PolvoEstelar)
;


ExprLogica:
   (Negado ?= '!')? exprLog=(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
;

ExprLogicaOperadores:
	(('('(operadorLog = ( '&&' | '||' ) (exprLogs+=(Expresion))+) ')' ))
;

XOR:
	'('(operadorXOR = '$$' exprLogIzq=(Expresion) exprLogDer=(Expresion)) ')'
;

ExprComparacion:
    '('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
;

Primitivo:
    tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna')
;

TipoFuncionOrdenSuperior:
    (ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')' | Objeto)
    (returnTipoFunc ?= '->' returnFunc=(Primitivo) )?
;


Planeta: /* int */
    x = INT
;

Constelacion: /* string */
    x = STRING
;

terminal CHAR: /* char */ 
    '"' ( '\\' . | !('\\'|'"') ) '"' | 
    "'" ( '\\' . | !('\\'|"'") ) "'"
;

Estrella:
    x = CHAR
;

PolvoEstelar:
    x = Double
;


Double returns ecore::EDouble:
    INT '.' INT
;


Luna:
    x = ('LunaNueva' | 'LunaLlena')
;

CalistoMapTipo: //mapa -> entrada con la declaracion de tipos
     'Calisto' '[' (tipoIzq=Primitivo '$' tipoDer=Primitivo) ']'
 ;
 
CalistoMapValor: //mapa -> salida con tipos asignados
     {CalistoMapValor} 'Calisto' '(' ((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)? ')'
;
//{CalistoMapValor} 'Calisto' (( ( calistoValues ?= '('(returnFunc+=Primitivo*) )? ')') | '()')
//{CalistoMapValor} 'Calisto' '(' ((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)? ')'

/*
 1 Valores de Planeta como INT o nueva descripcion regular
 2 Esta bien el uso de instanceof?
 3 Esta bien usar comparacion con null?
 4 Expr simple se puede usar: valor = (STRING | Planeta)     ?
 */