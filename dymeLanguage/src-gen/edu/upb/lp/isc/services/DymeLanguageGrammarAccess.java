/*
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DymeLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Programa");
		private final Assignment cFuncAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFuncFuncionParserRuleCall_0 = (RuleCall)cFuncAssignment.eContents().get(0);
		
		////Model:
		////    greetings+=Greeting*;
		////
		////Greeting:
		////    'Hello' name=ID '!';
		//Programa:
		//    (func+=Funcion)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(func+=Funcion)+
		public Assignment getFuncAssignment() { return cFuncAssignment; }
		
		//Funcion
		public RuleCall getFuncFuncionParserRuleCall_0() { return cFuncFuncionParserRuleCall_0; }
	}
	public class EstrellaFugazMeteoroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.EstrellaFugazMeteoro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cEstrellaFugazKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprLogCondicionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprLogCondicionExpresionParserRuleCall_0_2_0 = (RuleCall)cExprLogCondicionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEstrellaFugazResAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cEstrellaFugazResExpresionParserRuleCall_0_4_0 = (RuleCall)cEstrellaFugazResAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMeteoroKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMeteoroResAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMeteoroResExpresionParserRuleCall_1_1_0 = (RuleCall)cMeteoroResAssignment_1_1.eContents().get(0);
		
		//EstrellaFugazMeteoro: //If
		//     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		//     ("Meteoro" meteoroRes = Expresion)
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		////If
		//    ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		//    ("Meteoro" meteoroRes = Expresion)
		public Group getGroup() { return cGroup; }
		
		////If
		//    ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		public Group getGroup_0() { return cGroup_0; }
		
		//"EstrellaFugaz"
		public Keyword getEstrellaFugazKeyword_0_0() { return cEstrellaFugazKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//exprLogCondicion=(Expresion)
		public Assignment getExprLogCondicionAssignment_0_2() { return cExprLogCondicionAssignment_0_2; }
		
		//(Expresion)
		public RuleCall getExprLogCondicionExpresionParserRuleCall_0_2_0() { return cExprLogCondicionExpresionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//estrellaFugazRes = Expresion
		public Assignment getEstrellaFugazResAssignment_0_4() { return cEstrellaFugazResAssignment_0_4; }
		
		//Expresion
		public RuleCall getEstrellaFugazResExpresionParserRuleCall_0_4_0() { return cEstrellaFugazResExpresionParserRuleCall_0_4_0; }
		
		//("Meteoro" meteoroRes = Expresion)
		public Group getGroup_1() { return cGroup_1; }
		
		//"Meteoro"
		public Keyword getMeteoroKeyword_1_0() { return cMeteoroKeyword_1_0; }
		
		//meteoroRes = Expresion
		public Assignment getMeteoroResAssignment_1_1() { return cMeteoroResAssignment_1_1; }
		
		//Expresion
		public RuleCall getMeteoroResExpresionParserRuleCall_1_1_0() { return cMeteoroResExpresionParserRuleCall_1_1_0; }
	}
	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASIMIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNECESITAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_3_0_0 = (RuleCall)cParamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDollarSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_1_1_0 = (RuleCall)cParamAssignment_3_1_1.eContents().get(0);
		private final Keyword cCONVERGEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstrInstruccionParserRuleCall_5_0 = (RuleCall)cInstrAssignment_5.eContents().get(0);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpresionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cGUTKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cReturnTipoAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cReturnTipoHyphenMinusGreaterThanSignKeyword_8_0_0 = (Keyword)cReturnTipoAssignment_8_0.eContents().get(0);
		private final Assignment cTipoClassAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_8_1_0 = (RuleCall)cTipoClassAssignment_8_1.eContents().get(0);
		
		//Funcion:
		//    'CASIMIR' name=ID 'NECESITA' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//    (instr+=Instruccion)* (expr=Expresion)
		//    /*ef+=EstrellaFugazMeteoro*/
		//    "GUT" (returnTipo ?= '->' tipoClass=TipoFuncionOrdenSuperior?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CASIMIR' name=ID 'NECESITA' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//(instr+=Instruccion)* (expr=Expresion)
		///*ef+=EstrellaFugazMeteoro*/
		//"GUT" (returnTipo ?= '->' tipoClass=TipoFuncionOrdenSuperior?)?
		public Group getGroup() { return cGroup; }
		
		//'CASIMIR'
		public Keyword getCASIMIRKeyword_0() { return cCASIMIRKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'NECESITA'
		public Keyword getNECESITAKeyword_2() { return cNECESITAKeyword_2; }
		
		//(param+=Param ('$' param+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//param+=Param
		public Assignment getParamAssignment_3_0() { return cParamAssignment_3_0; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_0_0() { return cParamParamParserRuleCall_3_0_0; }
		
		//('$' param+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_3_1_0() { return cDollarSignKeyword_3_1_0; }
		
		//param+=Param
		public Assignment getParamAssignment_3_1_1() { return cParamAssignment_3_1_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_1_1_0() { return cParamParamParserRuleCall_3_1_1_0; }
		
		//'CONVERGE'
		public Keyword getCONVERGEKeyword_4() { return cCONVERGEKeyword_4; }
		
		//(instr+=Instruccion)*
		public Assignment getInstrAssignment_5() { return cInstrAssignment_5; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_5_0() { return cInstrInstruccionParserRuleCall_5_0; }
		
		//(expr=Expresion)
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_6_0() { return cExprExpresionParserRuleCall_6_0; }
		
		///*ef+=EstrellaFugazMeteoro*/
		//"GUT"
		public Keyword getGUTKeyword_7() { return cGUTKeyword_7; }
		
		//(returnTipo ?= '->' tipoClass=TipoFuncionOrdenSuperior?)?
		public Group getGroup_8() { return cGroup_8; }
		
		//returnTipo ?= '->'
		public Assignment getReturnTipoAssignment_8_0() { return cReturnTipoAssignment_8_0; }
		
		//'->'
		public Keyword getReturnTipoHyphenMinusGreaterThanSignKeyword_8_0_0() { return cReturnTipoHyphenMinusGreaterThanSignKeyword_8_0_0; }
		
		//tipoClass=TipoFuncionOrdenSuperior?
		public Assignment getTipoClassAssignment_8_1() { return cTipoClassAssignment_8_1; }
		
		//TipoFuncionOrdenSuperior
		public RuleCall getTipoClassTipoFuncionOrdenSuperiorParserRuleCall_8_1_0() { return cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_8_1_0; }
	}
	public class LlamadoFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.LlamadoFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFuncionFuncionCrossReference_0_0 = (CrossReference)cFuncionAssignment_0.eContents().get(0);
		private final RuleCall cFuncionFuncionIDTerminalRuleCall_0_0_1 = (RuleCall)cFuncionFuncionCrossReference_0_0.eContents().get(1);
		private final Keyword cCONSUMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpresionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cDollarSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpresionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadoFunc:
		//    funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)? '#'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)? '#'
		public Group getGroup() { return cGroup; }
		
		//funcion=[Funcion]
		public Assignment getFuncionAssignment_0() { return cFuncionAssignment_0; }
		
		//[Funcion]
		public CrossReference getFuncionFuncionCrossReference_0_0() { return cFuncionFuncionCrossReference_0_0; }
		
		//ID
		public RuleCall getFuncionFuncionIDTerminalRuleCall_0_0_1() { return cFuncionFuncionIDTerminalRuleCall_0_0_1; }
		
		//'CONSUME'
		public Keyword getCONSUMEKeyword_1() { return cCONSUMEKeyword_1; }
		
		//(args+=Expresion ('$' args+=Expresion)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_2_0_0() { return cArgsExpresionParserRuleCall_2_0_0; }
		
		//('$' args+=Expresion)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_2_1_0() { return cDollarSignKeyword_2_1_0; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_2_1_1_0() { return cArgsExpresionParserRuleCall_2_1_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_0 = (RuleCall)cTipoClassAssignment_2.eContents().get(0);
		
		//Param:
		//    name=ID 'es' tipoClass=TipoFuncionOrdenSuperior
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'es' tipoClass=TipoFuncionOrdenSuperior
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'es'
		public Keyword getEsKeyword_1() { return cEsKeyword_1; }
		
		//tipoClass=TipoFuncionOrdenSuperior
		public Assignment getTipoClassAssignment_2() { return cTipoClassAssignment_2; }
		
		//TipoFuncionOrdenSuperior
		public RuleCall getTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_0() { return cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_0; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Instruccion");
		private final RuleCall cAsignacionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Instruccion:
		//    Asignacion /*Falta */
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Asignacion
		public RuleCall getAsignacionParserRuleCall() { return cAsignacionParserRuleCall; }
	}
	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Asignacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMASAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTipoInferidoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTipoInferidoEsKeyword_2_0_0 = (Keyword)cTipoInferidoAssignment_2_0.eContents().get(0);
		private final Assignment cTipoClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_1_0 = (RuleCall)cTipoClassAssignment_2_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAsigAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorAsigExpresionParserRuleCall_4_0 = (RuleCall)cValorAsigAssignment_4.eContents().get(0);
		private final Keyword cTildeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Asignacion:
		//    'MASA' name=ID (tipoInferido ?= 'es' tipoClass=TipoFuncionOrdenSuperior)?  '<-' valorAsig=Expresion '~'
		//    /*'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion */
		//    /* Preguntar la comparacion con null, con el valor opcional */
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MASA' name=ID (tipoInferido ?= 'es' tipoClass=TipoFuncionOrdenSuperior)?  '<-' valorAsig=Expresion '~'
		public Group getGroup() { return cGroup; }
		
		//'MASA'
		public Keyword getMASAKeyword_0() { return cMASAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(tipoInferido ?= 'es' tipoClass=TipoFuncionOrdenSuperior)?
		public Group getGroup_2() { return cGroup_2; }
		
		//tipoInferido ?= 'es'
		public Assignment getTipoInferidoAssignment_2_0() { return cTipoInferidoAssignment_2_0; }
		
		//'es'
		public Keyword getTipoInferidoEsKeyword_2_0_0() { return cTipoInferidoEsKeyword_2_0_0; }
		
		//tipoClass=TipoFuncionOrdenSuperior
		public Assignment getTipoClassAssignment_2_1() { return cTipoClassAssignment_2_1; }
		
		//TipoFuncionOrdenSuperior
		public RuleCall getTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_1_0() { return cTipoClassTipoFuncionOrdenSuperiorParserRuleCall_2_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3() { return cLessThanSignHyphenMinusKeyword_3; }
		
		//valorAsig=Expresion
		public Assignment getValorAsigAssignment_4() { return cValorAsigAssignment_4; }
		
		//Expresion
		public RuleCall getValorAsigExpresionParserRuleCall_4_0() { return cValorAsigExpresionParserRuleCall_4_0; }
		
		//'~'
		public Keyword getTildeKeyword_5() { return cTildeKeyword_5; }
	}
	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Tipo");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTipoAlternatives_0 = (Alternatives)cTipoAssignment.eContents().get(0);
		private final Keyword cTipoPlanetaKeyword_0_0 = (Keyword)cTipoAlternatives_0.eContents().get(0);
		private final Keyword cTipoConstelacionKeyword_0_1 = (Keyword)cTipoAlternatives_0.eContents().get(1);
		private final Keyword cTipoEstrellaKeyword_0_2 = (Keyword)cTipoAlternatives_0.eContents().get(2);
		private final Keyword cTipoPolvoEstelarKeyword_0_3 = (Keyword)cTipoAlternatives_0.eContents().get(3);
		private final Keyword cTipoLunaKeyword_0_4 = (Keyword)cTipoAlternatives_0.eContents().get(4);
		
		//Tipo:
		//    tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna' )
		public Assignment getTipoAssignment() { return cTipoAssignment; }
		
		//('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna' )
		public Alternatives getTipoAlternatives_0() { return cTipoAlternatives_0; }
		
		//'Planeta'
		public Keyword getTipoPlanetaKeyword_0_0() { return cTipoPlanetaKeyword_0_0; }
		
		//'Constelacion'
		public Keyword getTipoConstelacionKeyword_0_1() { return cTipoConstelacionKeyword_0_1; }
		
		//'Estrella'
		public Keyword getTipoEstrellaKeyword_0_2() { return cTipoEstrellaKeyword_0_2; }
		
		//'PolvoEstelar'
		public Keyword getTipoPolvoEstelarKeyword_0_3() { return cTipoPolvoEstelarKeyword_0_3; }
		
		//'Luna'
		public Keyword getTipoLunaKeyword_0_4() { return cTipoLunaKeyword_0_4; }
	}
	public class TipoFuncionOrdenSuperiorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.TipoFuncionOrdenSuperior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cOrdenSuperiorTipoAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0 = (Keyword)cOrdenSuperiorTipoAssignment_0_0_0.eContents().get(0);
		private final Assignment cParamFuncAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_1_0 = (RuleCall)cParamFuncAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Keyword cDollarSignKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final Assignment cParamFuncAssignment_0_0_2_1 = (Assignment)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_2_1_0 = (RuleCall)cParamFuncAssignment_0_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final RuleCall cTipoParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReturnTipoFuncAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cReturnTipoFuncAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cReturnFuncAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cReturnFuncTipoFuncionOrdenSuperiorParserRuleCall_1_1_0_1_0 = (RuleCall)cReturnFuncAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_2 = (Keyword)cGroup_1_1_0.eContents().get(2);
		private final Assignment cReturnFuncAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cReturnFuncTipoParserRuleCall_1_1_1_0 = (RuleCall)cReturnFuncAssignment_1_1_1.eContents().get(0);
		
		//TipoFuncionOrdenSuperior:
		//    (ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')' | Tipo)
		//    (returnTipoFunc ?= '->' (('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')' | Tipo)
		//(returnTipoFunc ?= '->' (('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo))?
		public Group getGroup() { return cGroup; }
		
		//(ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')' | Tipo)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ordenSuperiorTipo = '('
		public Assignment getOrdenSuperiorTipoAssignment_0_0_0() { return cOrdenSuperiorTipoAssignment_0_0_0; }
		
		//'('
		public Keyword getOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0() { return cOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0; }
		
		//paramFunc+=(TipoFuncionOrdenSuperior)
		public Assignment getParamFuncAssignment_0_0_1() { return cParamFuncAssignment_0_0_1; }
		
		//(TipoFuncionOrdenSuperior)
		public RuleCall getParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_1_0() { return cParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_1_0; }
		
		//('$' paramFunc+=TipoFuncionOrdenSuperior)*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//'$'
		public Keyword getDollarSignKeyword_0_0_2_0() { return cDollarSignKeyword_0_0_2_0; }
		
		//paramFunc+=TipoFuncionOrdenSuperior
		public Assignment getParamFuncAssignment_0_0_2_1() { return cParamFuncAssignment_0_0_2_1; }
		
		//TipoFuncionOrdenSuperior
		public RuleCall getParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_2_1_0() { return cParamFuncTipoFuncionOrdenSuperiorParserRuleCall_0_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_3() { return cRightParenthesisKeyword_0_0_3; }
		
		//Tipo
		public RuleCall getTipoParserRuleCall_0_1() { return cTipoParserRuleCall_0_1; }
		
		//(returnTipoFunc ?= '->' (('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo))?
		public Group getGroup_1() { return cGroup_1; }
		
		//returnTipoFunc ?= '->'
		public Assignment getReturnTipoFuncAssignment_1_0() { return cReturnTipoFuncAssignment_1_0; }
		
		//'->'
		public Keyword getReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0() { return cReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0; }
		
		//(('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//('(' returnFunc=(TipoFuncionOrdenSuperior) ')')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0_0() { return cLeftParenthesisKeyword_1_1_0_0; }
		
		//returnFunc=(TipoFuncionOrdenSuperior)
		public Assignment getReturnFuncAssignment_1_1_0_1() { return cReturnFuncAssignment_1_1_0_1; }
		
		//(TipoFuncionOrdenSuperior)
		public RuleCall getReturnFuncTipoFuncionOrdenSuperiorParserRuleCall_1_1_0_1_0() { return cReturnFuncTipoFuncionOrdenSuperiorParserRuleCall_1_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_0_2() { return cRightParenthesisKeyword_1_1_0_2; }
		
		//returnFunc=Tipo
		public Assignment getReturnFuncAssignment_1_1_1() { return cReturnFuncAssignment_1_1_1; }
		
		//Tipo
		public RuleCall getReturnFuncTipoParserRuleCall_1_1_1_0() { return cReturnFuncTipoParserRuleCall_1_1_1_0; }
	}
	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Constante");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNombreAsignacionCrossReference_0 = (CrossReference)cNombreAssignment.eContents().get(0);
		private final RuleCall cNombreAsignacionIDTerminalRuleCall_0_1 = (RuleCall)cNombreAsignacionCrossReference_0.eContents().get(1);
		
		//Constante:
		//    nombre=[Asignacion]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//nombre=[Asignacion]
		public Assignment getNombreAssignment() { return cNombreAssignment; }
		
		//[Asignacion]
		public CrossReference getNombreAsignacionCrossReference_0() { return cNombreAsignacionCrossReference_0; }
		
		//ID
		public RuleCall getNombreAsignacionIDTerminalRuleCall_0_1() { return cNombreAsignacionIDTerminalRuleCall_0_1; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprConcatenacionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprLogicaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLlamadoFuncParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstanteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEstrellaFugazMeteoroParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expresion:
		//    ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | Constante | EstrellaFugazMeteoro
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | Constante | EstrellaFugazMeteoro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprConcatenacion
		public RuleCall getExprConcatenacionParserRuleCall_0() { return cExprConcatenacionParserRuleCall_0; }
		
		//ExprAritmetica
		public RuleCall getExprAritmeticaParserRuleCall_1() { return cExprAritmeticaParserRuleCall_1; }
		
		//ExprLogica
		public RuleCall getExprLogicaParserRuleCall_2() { return cExprLogicaParserRuleCall_2; }
		
		//LlamadoFunc
		public RuleCall getLlamadoFuncParserRuleCall_3() { return cLlamadoFuncParserRuleCall_3; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_4() { return cConstanteParserRuleCall_4; }
		
		//EstrellaFugazMeteoro
		public RuleCall getEstrellaFugazMeteoroParserRuleCall_5() { return cEstrellaFugazMeteoroParserRuleCall_5; }
	}
	public class ExprConcatenacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprConcatenacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperadorConAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cOperadorConPlusSignPlusSignKeyword_0_1_0_0 = (Keyword)cOperadorConAssignment_0_1_0.eContents().get(0);
		private final Assignment cExprConAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cExprConAlternatives_0_1_1_0 = (Alternatives)cExprConAssignment_0_1_1.eContents().get(0);
		private final RuleCall cExprConExprConcatenacionParserRuleCall_0_1_1_0_0 = (RuleCall)cExprConAlternatives_0_1_1_0.eContents().get(0);
		private final RuleCall cExprConLlamadoFuncParserRuleCall_0_1_1_0_1 = (RuleCall)cExprConAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cConstelacionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cEstrellaParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ExprConcatenacion:
		//    '('(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+) ')' |  (Constelacion | Estrella)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+) ')' |  (Constelacion | Estrella)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operadorCon = '++'
		public Assignment getOperadorConAssignment_0_1_0() { return cOperadorConAssignment_0_1_0; }
		
		//'++'
		public Keyword getOperadorConPlusSignPlusSignKeyword_0_1_0_0() { return cOperadorConPlusSignPlusSignKeyword_0_1_0_0; }
		
		//(exprCon+=(ExprConcatenacion | LlamadoFunc))+
		public Assignment getExprConAssignment_0_1_1() { return cExprConAssignment_0_1_1; }
		
		//(ExprConcatenacion | LlamadoFunc)
		public Alternatives getExprConAlternatives_0_1_1_0() { return cExprConAlternatives_0_1_1_0; }
		
		//ExprConcatenacion
		public RuleCall getExprConExprConcatenacionParserRuleCall_0_1_1_0_0() { return cExprConExprConcatenacionParserRuleCall_0_1_1_0_0; }
		
		//LlamadoFunc
		public RuleCall getExprConLlamadoFuncParserRuleCall_0_1_1_0_1() { return cExprConLlamadoFuncParserRuleCall_0_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//(Constelacion | Estrella)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Constelacion
		public RuleCall getConstelacionParserRuleCall_1_0() { return cConstelacionParserRuleCall_1_0; }
		
		//Estrella
		public RuleCall getEstrellaParserRuleCall_1_1() { return cEstrellaParserRuleCall_1_1; }
	}
	public class ExprAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprAritmetica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperadorArAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Alternatives cOperadorArAlternatives_0_1_0_0 = (Alternatives)cOperadorArAssignment_0_1_0.eContents().get(0);
		private final Keyword cOperadorArPlusSignKeyword_0_1_0_0_0 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(0);
		private final Keyword cOperadorArHyphenMinusKeyword_0_1_0_0_1 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(1);
		private final Keyword cOperadorArSolidusKeyword_0_1_0_0_2 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(2);
		private final Keyword cOperadorArAsteriskKeyword_0_1_0_0_3 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(3);
		private final Keyword cOperadorArPercentSignKeyword_0_1_0_0_4 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(4);
		private final Assignment cExprArAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cExprArAlternatives_0_1_1_0 = (Alternatives)cExprArAssignment_0_1_1.eContents().get(0);
		private final RuleCall cExprArExprAritmeticaParserRuleCall_0_1_1_0_0 = (RuleCall)cExprArAlternatives_0_1_1_0.eContents().get(0);
		private final RuleCall cExprArLlamadoFuncParserRuleCall_0_1_1_0_1 = (RuleCall)cExprArAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cPlanetaParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPolvoEstelarParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ExprAritmetica:
		//    '('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+) ')' |  (Planeta | PolvoEstelar)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+) ')' |  (Planeta | PolvoEstelar)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operadorAr = ('+' | '-' | '/' | '*' | '%')
		public Assignment getOperadorArAssignment_0_1_0() { return cOperadorArAssignment_0_1_0; }
		
		//('+' | '-' | '/' | '*' | '%')
		public Alternatives getOperadorArAlternatives_0_1_0_0() { return cOperadorArAlternatives_0_1_0_0; }
		
		//'+'
		public Keyword getOperadorArPlusSignKeyword_0_1_0_0_0() { return cOperadorArPlusSignKeyword_0_1_0_0_0; }
		
		//'-'
		public Keyword getOperadorArHyphenMinusKeyword_0_1_0_0_1() { return cOperadorArHyphenMinusKeyword_0_1_0_0_1; }
		
		//'/'
		public Keyword getOperadorArSolidusKeyword_0_1_0_0_2() { return cOperadorArSolidusKeyword_0_1_0_0_2; }
		
		//'*'
		public Keyword getOperadorArAsteriskKeyword_0_1_0_0_3() { return cOperadorArAsteriskKeyword_0_1_0_0_3; }
		
		//'%'
		public Keyword getOperadorArPercentSignKeyword_0_1_0_0_4() { return cOperadorArPercentSignKeyword_0_1_0_0_4; }
		
		//(exprAr+=(ExprAritmetica | LlamadoFunc))+
		public Assignment getExprArAssignment_0_1_1() { return cExprArAssignment_0_1_1; }
		
		//(ExprAritmetica | LlamadoFunc)
		public Alternatives getExprArAlternatives_0_1_1_0() { return cExprArAlternatives_0_1_1_0; }
		
		//ExprAritmetica
		public RuleCall getExprArExprAritmeticaParserRuleCall_0_1_1_0_0() { return cExprArExprAritmeticaParserRuleCall_0_1_1_0_0; }
		
		//LlamadoFunc
		public RuleCall getExprArLlamadoFuncParserRuleCall_0_1_1_0_1() { return cExprArLlamadoFuncParserRuleCall_0_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//(Planeta | PolvoEstelar)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Planeta
		public RuleCall getPlanetaParserRuleCall_1_0() { return cPlanetaParserRuleCall_1_0; }
		
		//PolvoEstelar
		public RuleCall getPolvoEstelarParserRuleCall_1_1() { return cPolvoEstelarParserRuleCall_1_1; }
	}
	public class ExprLogicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprLogica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperadorLogAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Alternatives cOperadorLogAlternatives_0_1_0_0 = (Alternatives)cOperadorLogAssignment_0_1_0.eContents().get(0);
		private final Keyword cOperadorLogAmpersandAmpersandKeyword_0_1_0_0_0 = (Keyword)cOperadorLogAlternatives_0_1_0_0.eContents().get(0);
		private final Keyword cOperadorLogVerticalLineVerticalLineKeyword_0_1_0_0_1 = (Keyword)cOperadorLogAlternatives_0_1_0_0.eContents().get(1);
		private final Keyword cOperadorLogDollarSignDollarSignKeyword_0_1_0_0_2 = (Keyword)cOperadorLogAlternatives_0_1_0_0.eContents().get(2);
		private final Keyword cOperadorLogExclamationMarkKeyword_0_1_0_0_3 = (Keyword)cOperadorLogAlternatives_0_1_0_0.eContents().get(3);
		private final Assignment cExprLogAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cExprLogAlternatives_0_1_1_0 = (Alternatives)cExprLogAssignment_0_1_1.eContents().get(0);
		private final RuleCall cExprLogExprLogicaParserRuleCall_0_1_1_0_0 = (RuleCall)cExprLogAlternatives_0_1_1_0.eContents().get(0);
		private final RuleCall cExprLogLlamadoFuncParserRuleCall_0_1_1_0_1 = (RuleCall)cExprLogAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cLunaParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprComparacionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ExprLogica:
		//    '('(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+) ')' | (Luna | ExprComparacion )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+) ')' | (Luna | ExprComparacion )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operadorLog = ( '&&' | '||' | '$$' | '!' )
		public Assignment getOperadorLogAssignment_0_1_0() { return cOperadorLogAssignment_0_1_0; }
		
		//( '&&' | '||' | '$$' | '!' )
		public Alternatives getOperadorLogAlternatives_0_1_0_0() { return cOperadorLogAlternatives_0_1_0_0; }
		
		//'&&'
		public Keyword getOperadorLogAmpersandAmpersandKeyword_0_1_0_0_0() { return cOperadorLogAmpersandAmpersandKeyword_0_1_0_0_0; }
		
		//'||'
		public Keyword getOperadorLogVerticalLineVerticalLineKeyword_0_1_0_0_1() { return cOperadorLogVerticalLineVerticalLineKeyword_0_1_0_0_1; }
		
		//'$$'
		public Keyword getOperadorLogDollarSignDollarSignKeyword_0_1_0_0_2() { return cOperadorLogDollarSignDollarSignKeyword_0_1_0_0_2; }
		
		//'!'
		public Keyword getOperadorLogExclamationMarkKeyword_0_1_0_0_3() { return cOperadorLogExclamationMarkKeyword_0_1_0_0_3; }
		
		//(exprLog+=(ExprLogica | LlamadoFunc))+
		public Assignment getExprLogAssignment_0_1_1() { return cExprLogAssignment_0_1_1; }
		
		//(ExprLogica | LlamadoFunc)
		public Alternatives getExprLogAlternatives_0_1_1_0() { return cExprLogAlternatives_0_1_1_0; }
		
		//ExprLogica
		public RuleCall getExprLogExprLogicaParserRuleCall_0_1_1_0_0() { return cExprLogExprLogicaParserRuleCall_0_1_1_0_0; }
		
		//LlamadoFunc
		public RuleCall getExprLogLlamadoFuncParserRuleCall_0_1_1_0_1() { return cExprLogLlamadoFuncParserRuleCall_0_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//(Luna | ExprComparacion )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Luna
		public RuleCall getLunaParserRuleCall_1_0() { return cLunaParserRuleCall_1_0; }
		
		//ExprComparacion
		public RuleCall getExprComparacionParserRuleCall_1_1() { return cExprComparacionParserRuleCall_1_1; }
	}
	public class ExprComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprComparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperadorCompAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperadorCompAlternatives_1_0_0 = (Alternatives)cOperadorCompAssignment_1_0.eContents().get(0);
		private final Keyword cOperadorCompLessThanSignKeyword_1_0_0_0 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperadorCompGreaterThanSignKeyword_1_0_0_1 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(3);
		private final Keyword cOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(4);
		private final Keyword cOperadorCompTildeKeyword_1_0_0_5 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(5);
		private final Assignment cExprComIzqAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprComIzqExpresionParserRuleCall_1_1_0 = (RuleCall)cExprComIzqAssignment_1_1.eContents().get(0);
		private final Assignment cExprComDerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprComDerExpresionParserRuleCall_1_2_0 = (RuleCall)cExprComDerAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExprComparacion:
		//    '('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~') exprComIzq=(Expresion) exprComDer=(Expresion))
		public Group getGroup_1() { return cGroup_1; }
		
		//operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~')
		public Assignment getOperadorCompAssignment_1_0() { return cOperadorCompAssignment_1_0; }
		
		//('<' | '>' | '<=' | '>=' | '==' | '~')
		public Alternatives getOperadorCompAlternatives_1_0_0() { return cOperadorCompAlternatives_1_0_0; }
		
		//'<'
		public Keyword getOperadorCompLessThanSignKeyword_1_0_0_0() { return cOperadorCompLessThanSignKeyword_1_0_0_0; }
		
		//'>'
		public Keyword getOperadorCompGreaterThanSignKeyword_1_0_0_1() { return cOperadorCompGreaterThanSignKeyword_1_0_0_1; }
		
		//'<='
		public Keyword getOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2() { return cOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2; }
		
		//'>='
		public Keyword getOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3() { return cOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3; }
		
		//'=='
		public Keyword getOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4() { return cOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4; }
		
		//'~'
		public Keyword getOperadorCompTildeKeyword_1_0_0_5() { return cOperadorCompTildeKeyword_1_0_0_5; }
		
		//exprComIzq=(Expresion)
		public Assignment getExprComIzqAssignment_1_1() { return cExprComIzqAssignment_1_1; }
		
		//(Expresion)
		public RuleCall getExprComIzqExpresionParserRuleCall_1_1_0() { return cExprComIzqExpresionParserRuleCall_1_1_0; }
		
		//exprComDer=(Expresion)
		public Assignment getExprComDerAssignment_1_2() { return cExprComDerAssignment_1_2; }
		
		//(Expresion)
		public RuleCall getExprComDerExpresionParserRuleCall_1_2_0() { return cExprComDerExpresionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PlanetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Planeta");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		///*
		//ExprSimple:
		//     valorExpr = ( Planeta | PolvoEstelar | Constelacion | Estrella | Luna | Cometa )
		//;
		//*/
		//Planeta: /* int */
		//    x = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///* int */
		//   x = INT
		public Assignment getXAssignment() { return cXAssignment; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_0() { return cXINTTerminalRuleCall_0; }
	}
	public class ConstelacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Constelacion");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXSTRINGTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//Constelacion: /* string */
		//    x = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///* string */
		//   x = STRING
		public Assignment getXAssignment() { return cXAssignment; }
		
		//STRING
		public RuleCall getXSTRINGTerminalRuleCall_0() { return cXSTRINGTerminalRuleCall_0; }
	}
	public class EstrellaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Estrella");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cXAKeyword_0 = (Keyword)cXAssignment.eContents().get(0);
		
		//Estrella: /* char */ /* preguntar como aceptar solo 1 */
		//    x = 'a'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///* char */ /* preguntar como aceptar solo 1 */
		//   x = 'a'
		public Assignment getXAssignment() { return cXAssignment; }
		
		//'a'
		public Keyword getXAKeyword_0() { return cXAKeyword_0; }
	}
	public class PolvoEstelarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.PolvoEstelar");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXDoubleParserRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//PolvoEstelar:
		//    x = Double
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = Double
		public Assignment getXAssignment() { return cXAssignment; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_0() { return cXDoubleParserRuleCall_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//    INT '.' INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Luna");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cXAlternatives_0 = (Alternatives)cXAssignment.eContents().get(0);
		private final Keyword cXLunaNuevaKeyword_0_0 = (Keyword)cXAlternatives_0.eContents().get(0);
		private final Keyword cXLunaLlenaKeyword_0_1 = (Keyword)cXAlternatives_0.eContents().get(1);
		
		//Luna:
		//    x = ('LunaNueva' | 'LunaLlena')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = ('LunaNueva' | 'LunaLlena')
		public Assignment getXAssignment() { return cXAssignment; }
		
		//('LunaNueva' | 'LunaLlena')
		public Alternatives getXAlternatives_0() { return cXAlternatives_0; }
		
		//'LunaNueva'
		public Keyword getXLunaNuevaKeyword_0_0() { return cXLunaNuevaKeyword_0_0; }
		
		//'LunaLlena'
		public Keyword getXLunaLlenaKeyword_0_1() { return cXLunaLlenaKeyword_0_1; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final EstrellaFugazMeteoroElements pEstrellaFugazMeteoro;
	private final FuncionElements pFuncion;
	private final LlamadoFuncElements pLlamadoFunc;
	private final ParamElements pParam;
	private final InstruccionElements pInstruccion;
	private final AsignacionElements pAsignacion;
	private final TipoElements pTipo;
	private final TipoFuncionOrdenSuperiorElements pTipoFuncionOrdenSuperior;
	private final ConstanteElements pConstante;
	private final ExpresionElements pExpresion;
	private final ExprConcatenacionElements pExprConcatenacion;
	private final ExprAritmeticaElements pExprAritmetica;
	private final ExprLogicaElements pExprLogica;
	private final ExprComparacionElements pExprComparacion;
	private final PlanetaElements pPlaneta;
	private final ConstelacionElements pConstelacion;
	private final EstrellaElements pEstrella;
	private final PolvoEstelarElements pPolvoEstelar;
	private final DoubleElements pDouble;
	private final LunaElements pLuna;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DymeLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pEstrellaFugazMeteoro = new EstrellaFugazMeteoroElements();
		this.pFuncion = new FuncionElements();
		this.pLlamadoFunc = new LlamadoFuncElements();
		this.pParam = new ParamElements();
		this.pInstruccion = new InstruccionElements();
		this.pAsignacion = new AsignacionElements();
		this.pTipo = new TipoElements();
		this.pTipoFuncionOrdenSuperior = new TipoFuncionOrdenSuperiorElements();
		this.pConstante = new ConstanteElements();
		this.pExpresion = new ExpresionElements();
		this.pExprConcatenacion = new ExprConcatenacionElements();
		this.pExprAritmetica = new ExprAritmeticaElements();
		this.pExprLogica = new ExprLogicaElements();
		this.pExprComparacion = new ExprComparacionElements();
		this.pPlaneta = new PlanetaElements();
		this.pConstelacion = new ConstelacionElements();
		this.pEstrella = new EstrellaElements();
		this.pPolvoEstelar = new PolvoEstelarElements();
		this.pDouble = new DoubleElements();
		this.pLuna = new LunaElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.DymeLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////    greetings+=Greeting*;
	////
	////Greeting:
	////    'Hello' name=ID '!';
	//Programa:
	//    (func+=Funcion)+
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//EstrellaFugazMeteoro: //If
	//     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
	//     ("Meteoro" meteoroRes = Expresion)
	// ;
	public EstrellaFugazMeteoroElements getEstrellaFugazMeteoroAccess() {
		return pEstrellaFugazMeteoro;
	}
	
	public ParserRule getEstrellaFugazMeteoroRule() {
		return getEstrellaFugazMeteoroAccess().getRule();
	}
	
	//Funcion:
	//    'CASIMIR' name=ID 'NECESITA' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
	//    (instr+=Instruccion)* (expr=Expresion)
	//    /*ef+=EstrellaFugazMeteoro*/
	//    "GUT" (returnTipo ?= '->' tipoClass=TipoFuncionOrdenSuperior?)?
	//;
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}
	
	//LlamadoFunc:
	//    funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)? '#'
	//;
	public LlamadoFuncElements getLlamadoFuncAccess() {
		return pLlamadoFunc;
	}
	
	public ParserRule getLlamadoFuncRule() {
		return getLlamadoFuncAccess().getRule();
	}
	
	//Param:
	//    name=ID 'es' tipoClass=TipoFuncionOrdenSuperior
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Instruccion:
	//    Asignacion /*Falta */
	//;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//Asignacion:
	//    'MASA' name=ID (tipoInferido ?= 'es' tipoClass=TipoFuncionOrdenSuperior)?  '<-' valorAsig=Expresion '~'
	//    /*'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion */
	//    /* Preguntar la comparacion con null, con el valor opcional */
	//;
	public AsignacionElements getAsignacionAccess() {
		return pAsignacion;
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}
	
	//Tipo:
	//    tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna' )
	//;
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}
	
	//TipoFuncionOrdenSuperior:
	//    (ordenSuperiorTipo = '(' paramFunc+=(TipoFuncionOrdenSuperior) ('$' paramFunc+=TipoFuncionOrdenSuperior)* ')' | Tipo)
	//    (returnTipoFunc ?= '->' (('(' returnFunc=(TipoFuncionOrdenSuperior) ')') | returnFunc=Tipo))?
	//;
	public TipoFuncionOrdenSuperiorElements getTipoFuncionOrdenSuperiorAccess() {
		return pTipoFuncionOrdenSuperior;
	}
	
	public ParserRule getTipoFuncionOrdenSuperiorRule() {
		return getTipoFuncionOrdenSuperiorAccess().getRule();
	}
	
	//Constante:
	//    nombre=[Asignacion]
	//;
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}
	
	//Expresion:
	//    ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | Constante | EstrellaFugazMeteoro
	//;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//ExprConcatenacion:
	//    '('(operadorCon = '++' (exprCon+=(ExprConcatenacion | LlamadoFunc))+) ')' |  (Constelacion | Estrella)
	//;
	public ExprConcatenacionElements getExprConcatenacionAccess() {
		return pExprConcatenacion;
	}
	
	public ParserRule getExprConcatenacionRule() {
		return getExprConcatenacionAccess().getRule();
	}
	
	//ExprAritmetica:
	//    '('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(ExprAritmetica | LlamadoFunc))+) ')' |  (Planeta | PolvoEstelar)
	//;
	public ExprAritmeticaElements getExprAritmeticaAccess() {
		return pExprAritmetica;
	}
	
	public ParserRule getExprAritmeticaRule() {
		return getExprAritmeticaAccess().getRule();
	}
	
	//ExprLogica:
	//    '('(operadorLog = ( '&&' | '||' | '$$' | '!' ) (exprLog+=(ExprLogica | LlamadoFunc))+) ')' | (Luna | ExprComparacion )
	//;
	public ExprLogicaElements getExprLogicaAccess() {
		return pExprLogica;
	}
	
	public ParserRule getExprLogicaRule() {
		return getExprLogicaAccess().getRule();
	}
	
	//ExprComparacion:
	//    '('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
	//;
	public ExprComparacionElements getExprComparacionAccess() {
		return pExprComparacion;
	}
	
	public ParserRule getExprComparacionRule() {
		return getExprComparacionAccess().getRule();
	}
	
	///*
	//ExprSimple:
	//     valorExpr = ( Planeta | PolvoEstelar | Constelacion | Estrella | Luna | Cometa )
	//;
	//*/
	//Planeta: /* int */
	//    x = INT
	//;
	public PlanetaElements getPlanetaAccess() {
		return pPlaneta;
	}
	
	public ParserRule getPlanetaRule() {
		return getPlanetaAccess().getRule();
	}
	
	//Constelacion: /* string */
	//    x = STRING
	//;
	public ConstelacionElements getConstelacionAccess() {
		return pConstelacion;
	}
	
	public ParserRule getConstelacionRule() {
		return getConstelacionAccess().getRule();
	}
	
	//Estrella: /* char */ /* preguntar como aceptar solo 1 */
	//    x = 'a'
	//;
	public EstrellaElements getEstrellaAccess() {
		return pEstrella;
	}
	
	public ParserRule getEstrellaRule() {
		return getEstrellaAccess().getRule();
	}
	
	//PolvoEstelar:
	//    x = Double
	//;
	public PolvoEstelarElements getPolvoEstelarAccess() {
		return pPolvoEstelar;
	}
	
	public ParserRule getPolvoEstelarRule() {
		return getPolvoEstelarAccess().getRule();
	}
	
	//Double returns ecore::EDouble:
	//    INT '.' INT
	//;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Luna:
	//    x = ('LunaNueva' | 'LunaLlena')
	//;
	public LunaElements getLunaAccess() {
		return pLuna;
	}
	
	public ParserRule getLunaRule() {
		return getLunaAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
