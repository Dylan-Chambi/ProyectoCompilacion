/*
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DymeLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGALAXIAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cProgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProgInstruccionesParserRuleCall_2_0 = (RuleCall)cProgAssignment_2.eContents().get(0);
		
		////Model:
		////    greetings+=Greeting*;
		////
		////Greeting:
		////    'Hello' name=ID '!';
		//Programa:
		//    'GALAXIA' name=ID
		//    (prog+=Instrucciones)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GALAXIA' name=ID
		//(prog+=Instrucciones)*
		public Group getGroup() { return cGroup; }
		
		//'GALAXIA'
		public Keyword getGALAXIAKeyword_0() { return cGALAXIAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(prog+=Instrucciones)*
		public Assignment getProgAssignment_2() { return cProgAssignment_2; }
		
		//Instrucciones
		public RuleCall getProgInstruccionesParserRuleCall_2_0() { return cProgInstruccionesParserRuleCall_2_0; }
	}
	public class ObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Objeto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalistoMapTipoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Objeto:
		//    (CalistoMapTipo | Primitivo)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(CalistoMapTipo | Primitivo)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CalistoMapTipo
		public RuleCall getCalistoMapTipoParserRuleCall_0() { return cCalistoMapTipoParserRuleCall_0; }
		
		//Primitivo
		public RuleCall getPrimitivoParserRuleCall_1() { return cPrimitivoParserRuleCall_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrintTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPrintTipoAlternatives_0_0 = (Alternatives)cPrintTipoAssignment_0.eContents().get(0);
		private final Keyword cPrintTipoMensajeKeyword_0_0_0 = (Keyword)cPrintTipoAlternatives_0_0.eContents().get(0);
		private final Keyword cPrintTipoMensajeLinealKeyword_0_0_1 = (Keyword)cPrintTipoAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValValorParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Print:
		//    printTipo=('Mensaje' | 'MensajeLineal') '(' (val=Valor) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//printTipo=('Mensaje' | 'MensajeLineal') '(' (val=Valor) ')'
		public Group getGroup() { return cGroup; }
		
		//printTipo=('Mensaje' | 'MensajeLineal')
		public Assignment getPrintTipoAssignment_0() { return cPrintTipoAssignment_0; }
		
		//('Mensaje' | 'MensajeLineal')
		public Alternatives getPrintTipoAlternatives_0_0() { return cPrintTipoAlternatives_0_0; }
		
		//'Mensaje'
		public Keyword getPrintTipoMensajeKeyword_0_0_0() { return cPrintTipoMensajeKeyword_0_0_0; }
		
		//'MensajeLineal'
		public Keyword getPrintTipoMensajeLinealKeyword_0_0_1() { return cPrintTipoMensajeLinealKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(val=Valor)
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Valor
		public RuleCall getValValorParserRuleCall_2_0() { return cValValorParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class InstruccionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Instrucciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instrucciones:
		//    (Declaracion | Valor)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Declaracion | Valor)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaracion
		public RuleCall getDeclaracionParserRuleCall_0() { return cDeclaracionParserRuleCall_0; }
		
		//Valor
		public RuleCall getValorParserRuleCall_1() { return cValorParserRuleCall_1; }
	}
	public class EstrellaFugazMeteoroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.EstrellaFugazMeteoro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cEstrellaFugazKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprLogCondicionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprLogCondicionExpresionParserRuleCall_0_2_0 = (RuleCall)cExprLogCondicionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cEstrellaFugazResAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cEstrellaFugazResExpresionParserRuleCall_0_4_0 = (RuleCall)cEstrellaFugazResAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMeteoroKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMeteoroResAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMeteoroResExpresionParserRuleCall_1_1_0 = (RuleCall)cMeteoroResAssignment_1_1.eContents().get(0);
		
		//EstrellaFugazMeteoro: //If
		//     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		//     ("Meteoro" meteoroRes = Expresion)
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		////If
		//    ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		//    ("Meteoro" meteoroRes = Expresion)
		public Group getGroup() { return cGroup; }
		
		////If
		//    ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
		public Group getGroup_0() { return cGroup_0; }
		
		//"EstrellaFugaz"
		public Keyword getEstrellaFugazKeyword_0_0() { return cEstrellaFugazKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//exprLogCondicion=(Expresion)
		public Assignment getExprLogCondicionAssignment_0_2() { return cExprLogCondicionAssignment_0_2; }
		
		//(Expresion)
		public RuleCall getExprLogCondicionExpresionParserRuleCall_0_2_0() { return cExprLogCondicionExpresionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//estrellaFugazRes = Expresion
		public Assignment getEstrellaFugazResAssignment_0_4() { return cEstrellaFugazResAssignment_0_4; }
		
		//Expresion
		public RuleCall getEstrellaFugazResExpresionParserRuleCall_0_4_0() { return cEstrellaFugazResExpresionParserRuleCall_0_4_0; }
		
		//("Meteoro" meteoroRes = Expresion)
		public Group getGroup_1() { return cGroup_1; }
		
		//"Meteoro"
		public Keyword getMeteoroKeyword_1_0() { return cMeteoroKeyword_1_0; }
		
		//meteoroRes = Expresion
		public Assignment getMeteoroResAssignment_1_1() { return cMeteoroResAssignment_1_1; }
		
		//Expresion
		public RuleCall getMeteoroResExpresionParserRuleCall_1_1_0() { return cMeteoroResExpresionParserRuleCall_1_1_0; }
	}
	public class LlamadoFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.LlamadoFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncionIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFuncionIDDeclaracionCrossReference_0_0 = (CrossReference)cFuncionIDAssignment_0.eContents().get(0);
		private final RuleCall cFuncionIDDeclaracionIDTerminalRuleCall_0_0_1 = (RuleCall)cFuncionIDDeclaracionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsValorParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cDollarSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsValorParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadoFunc:
		//    funcionID=[Declaracion] '{' (args+=(Valor) ('$' args+=(Valor))*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//funcionID=[Declaracion] '{' (args+=(Valor) ('$' args+=(Valor))*)? '}'
		public Group getGroup() { return cGroup; }
		
		//funcionID=[Declaracion]
		public Assignment getFuncionIDAssignment_0() { return cFuncionIDAssignment_0; }
		
		//[Declaracion]
		public CrossReference getFuncionIDDeclaracionCrossReference_0_0() { return cFuncionIDDeclaracionCrossReference_0_0; }
		
		//ID
		public RuleCall getFuncionIDDeclaracionIDTerminalRuleCall_0_0_1() { return cFuncionIDDeclaracionIDTerminalRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=(Valor) ('$' args+=(Valor))*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=(Valor)
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//(Valor)
		public RuleCall getArgsValorParserRuleCall_2_0_0() { return cArgsValorParserRuleCall_2_0_0; }
		
		//('$' args+=(Valor))*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_2_1_0() { return cDollarSignKeyword_2_1_0; }
		
		//args+=(Valor)
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//(Valor)
		public RuleCall getArgsValorParserRuleCall_2_1_1_0() { return cArgsValorParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LlamadoMapaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.LlamadoMapa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDecIDDeclaracionCrossReference_0_0 = (CrossReference)cDecIDAssignment_0.eContents().get(0);
		private final RuleCall cDecIDDeclaracionIDTerminalRuleCall_0_0_1 = (RuleCall)cDecIDDeclaracionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapKeyExpresionParserRuleCall_2_0 = (RuleCall)cMapKeyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadoMapa:
		//    decID=[Declaracion] '[' mapKey=Expresion ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//decID=[Declaracion] '[' mapKey=Expresion ']'
		public Group getGroup() { return cGroup; }
		
		//decID=[Declaracion]
		public Assignment getDecIDAssignment_0() { return cDecIDAssignment_0; }
		
		//[Declaracion]
		public CrossReference getDecIDDeclaracionCrossReference_0_0() { return cDecIDDeclaracionCrossReference_0_0; }
		
		//ID
		public RuleCall getDecIDDeclaracionIDTerminalRuleCall_0_0_1() { return cDecIDDeclaracionIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//mapKey=Expresion
		public Assignment getMapKeyAssignment_2() { return cMapKeyAssignment_2; }
		
		//Expresion
		public RuleCall getMapKeyExpresionParserRuleCall_2_0() { return cMapKeyExpresionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class DeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Declaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsignacionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaracion:
		//    (Asignacion | Funcion | Param | Print)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Asignacion | Funcion | Param | Print)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Asignacion
		public RuleCall getAsignacionParserRuleCall_0() { return cAsignacionParserRuleCall_0; }
		
		//Funcion
		public RuleCall getFuncionParserRuleCall_1() { return cFuncionParserRuleCall_1; }
		
		//Param
		public RuleCall getParamParserRuleCall_2() { return cParamParserRuleCall_2; }
		
		//Print
		public RuleCall getPrintParserRuleCall_3() { return cPrintParserRuleCall_3; }
	}
	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cGusanoAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cGusanoAgujeroKeyword_0_0_0 = (Keyword)cGusanoAssignment_0_0.eContents().get(0);
		private final Keyword cDeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cGusanoKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cCASIMIRKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCONSUMEKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cDollarSignKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_2_1_0 = (RuleCall)cParamAssignment_3_2_1.eContents().get(0);
		private final Keyword cCONVERGEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarDeclaracionParserRuleCall_5_0 = (RuleCall)cDeclarAssignment_5.eContents().get(0);
		private final Assignment cValAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValValorParserRuleCall_6_0 = (RuleCall)cValAssignment_6.eContents().get(0);
		private final Keyword cGUTKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cTipoInferidoAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cTipoInferidoHyphenMinusGreaterThanSignKeyword_8_0_0 = (Keyword)cTipoInferidoAssignment_8_0.eContents().get(0);
		private final Assignment cTipoClassAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTipoClassPrimitivoParserRuleCall_8_1_0 = (RuleCall)cTipoClassAssignment_8_1.eContents().get(0);
		
		//Funcion:
		//    (gusano ?= 'Agujero' 'de' 'Gusano')?
		//    'CASIMIR' name=ID ('CONSUME'  param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//    (declar+=(Declaracion))*
		//    (val=(Valor))
		//    "GUT" (tipoInferido ?= '->' tipoClass=Primitivo)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(gusano ?= 'Agujero' 'de' 'Gusano')?
		//'CASIMIR' name=ID ('CONSUME'  param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//(declar+=(Declaracion))*
		//(val=(Valor))
		//"GUT" (tipoInferido ?= '->' tipoClass=Primitivo)?
		public Group getGroup() { return cGroup; }
		
		//(gusano ?= 'Agujero' 'de' 'Gusano')?
		public Group getGroup_0() { return cGroup_0; }
		
		//gusano ?= 'Agujero'
		public Assignment getGusanoAssignment_0_0() { return cGusanoAssignment_0_0; }
		
		//'Agujero'
		public Keyword getGusanoAgujeroKeyword_0_0_0() { return cGusanoAgujeroKeyword_0_0_0; }
		
		//'de'
		public Keyword getDeKeyword_0_1() { return cDeKeyword_0_1; }
		
		//'Gusano'
		public Keyword getGusanoKeyword_0_2() { return cGusanoKeyword_0_2; }
		
		//'CASIMIR'
		public Keyword getCASIMIRKeyword_1() { return cCASIMIRKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('CONSUME'  param+=Param ('$' param+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'CONSUME'
		public Keyword getCONSUMEKeyword_3_0() { return cCONSUMEKeyword_3_0; }
		
		//param+=Param
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_1_0() { return cParamParamParserRuleCall_3_1_0; }
		
		//('$' param+=Param)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'$'
		public Keyword getDollarSignKeyword_3_2_0() { return cDollarSignKeyword_3_2_0; }
		
		//param+=Param
		public Assignment getParamAssignment_3_2_1() { return cParamAssignment_3_2_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_2_1_0() { return cParamParamParserRuleCall_3_2_1_0; }
		
		//'CONVERGE'
		public Keyword getCONVERGEKeyword_4() { return cCONVERGEKeyword_4; }
		
		//(declar+=(Declaracion))*
		public Assignment getDeclarAssignment_5() { return cDeclarAssignment_5; }
		
		//(Declaracion)
		public RuleCall getDeclarDeclaracionParserRuleCall_5_0() { return cDeclarDeclaracionParserRuleCall_5_0; }
		
		//(val=(Valor))
		public Assignment getValAssignment_6() { return cValAssignment_6; }
		
		//(Valor)
		public RuleCall getValValorParserRuleCall_6_0() { return cValValorParserRuleCall_6_0; }
		
		//"GUT"
		public Keyword getGUTKeyword_7() { return cGUTKeyword_7; }
		
		//(tipoInferido ?= '->' tipoClass=Primitivo)?
		public Group getGroup_8() { return cGroup_8; }
		
		//tipoInferido ?= '->'
		public Assignment getTipoInferidoAssignment_8_0() { return cTipoInferidoAssignment_8_0; }
		
		//'->'
		public Keyword getTipoInferidoHyphenMinusGreaterThanSignKeyword_8_0_0() { return cTipoInferidoHyphenMinusGreaterThanSignKeyword_8_0_0; }
		
		//tipoClass=Primitivo
		public Assignment getTipoClassAssignment_8_1() { return cTipoClassAssignment_8_1; }
		
		//Primitivo
		public RuleCall getTipoClassPrimitivoParserRuleCall_8_1_0() { return cTipoClassPrimitivoParserRuleCall_8_1_0; }
	}
	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Asignacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMASAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTipoInferidoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTipoInferidoEsKeyword_2_0_0 = (Keyword)cTipoInferidoAssignment_2_0.eContents().get(0);
		private final Assignment cTipoClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTipoClassObjetoParserRuleCall_2_1_0 = (RuleCall)cTipoClassAssignment_2_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAsigAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorAsigValorParserRuleCall_4_0 = (RuleCall)cValorAsigAssignment_4.eContents().get(0);
		
		//Asignacion:
		//    'MASA' name=ID (tipoInferido ?= 'es' tipoClass=Objeto)?  '<-' valorAsig=Valor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MASA' name=ID (tipoInferido ?= 'es' tipoClass=Objeto)?  '<-' valorAsig=Valor
		public Group getGroup() { return cGroup; }
		
		//'MASA'
		public Keyword getMASAKeyword_0() { return cMASAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(tipoInferido ?= 'es' tipoClass=Objeto)?
		public Group getGroup_2() { return cGroup_2; }
		
		//tipoInferido ?= 'es'
		public Assignment getTipoInferidoAssignment_2_0() { return cTipoInferidoAssignment_2_0; }
		
		//'es'
		public Keyword getTipoInferidoEsKeyword_2_0_0() { return cTipoInferidoEsKeyword_2_0_0; }
		
		//tipoClass=Objeto
		public Assignment getTipoClassAssignment_2_1() { return cTipoClassAssignment_2_1; }
		
		//Objeto
		public RuleCall getTipoClassObjetoParserRuleCall_2_1_0() { return cTipoClassObjetoParserRuleCall_2_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3() { return cLessThanSignHyphenMinusKeyword_3; }
		
		//valorAsig=Valor
		public Assignment getValorAsigAssignment_4() { return cValorAsigAssignment_4; }
		
		//Valor
		public RuleCall getValorAsigValorParserRuleCall_4_0() { return cValorAsigValorParserRuleCall_4_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cParamAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_0_0 = (RuleCall)cParamAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cDollarSignKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cParamAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_1_1_0 = (RuleCall)cParamAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cParamAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParamObjetoParserRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTipoRetornoAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cTipoRetornoHyphenMinusGreaterThanSignKeyword_3_0_0 = (Keyword)cTipoRetornoAssignment_3_0.eContents().get(0);
		private final Assignment cReturnTipoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReturnTipoPrimitivoParserRuleCall_3_1_0 = (RuleCall)cReturnTipoAssignment_3_1.eContents().get(0);
		
		//Param:
		//    name=ID 'es' ('(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')' | param+=Objeto) (tipoRetorno ?= '->' returnTipo=Primitivo)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'es' ('(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')' | param+=Objeto) (tipoRetorno ?= '->' returnTipo=Primitivo)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'es'
		public Keyword getEsKeyword_1() { return cEsKeyword_1; }
		
		//('(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')' | param+=Objeto)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//(param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//param+=(TipoFuncionOrdenSuperior)
		public Assignment getParamAssignment_2_0_1_0() { return cParamAssignment_2_0_1_0; }
		
		//(TipoFuncionOrdenSuperior)
		public RuleCall getParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_0_0() { return cParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_0_0; }
		
		//('$' param+=TipoFuncionOrdenSuperior)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_2_0_1_1_0() { return cDollarSignKeyword_2_0_1_1_0; }
		
		//param+=TipoFuncionOrdenSuperior
		public Assignment getParamAssignment_2_0_1_1_1() { return cParamAssignment_2_0_1_1_1; }
		
		//TipoFuncionOrdenSuperior
		public RuleCall getParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_1_1_0() { return cParamTipoFuncionOrdenSuperiorParserRuleCall_2_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//param+=Objeto
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//Objeto
		public RuleCall getParamObjetoParserRuleCall_2_1_0() { return cParamObjetoParserRuleCall_2_1_0; }
		
		//(tipoRetorno ?= '->' returnTipo=Primitivo)?
		public Group getGroup_3() { return cGroup_3; }
		
		//tipoRetorno ?= '->'
		public Assignment getTipoRetornoAssignment_3_0() { return cTipoRetornoAssignment_3_0; }
		
		//'->'
		public Keyword getTipoRetornoHyphenMinusGreaterThanSignKeyword_3_0_0() { return cTipoRetornoHyphenMinusGreaterThanSignKeyword_3_0_0; }
		
		//returnTipo=Primitivo
		public Assignment getReturnTipoAssignment_3_1() { return cReturnTipoAssignment_3_1; }
		
		//Primitivo
		public RuleCall getReturnTipoPrimitivoParserRuleCall_3_1_0() { return cReturnTipoPrimitivoParserRuleCall_3_1_0; }
	}
	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Constante");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNombreDeclaracionCrossReference_0 = (CrossReference)cNombreAssignment.eContents().get(0);
		private final RuleCall cNombreDeclaracionIDTerminalRuleCall_0_1 = (RuleCall)cNombreDeclaracionCrossReference_0.eContents().get(1);
		
		//Constante:
		//    nombre=[Declaracion]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//nombre=[Declaracion]
		public Assignment getNombreAssignment() { return cNombreAssignment; }
		
		//[Declaracion]
		public CrossReference getNombreDeclaracionCrossReference_0() { return cNombreDeclaracionCrossReference_0; }
		
		//ID
		public RuleCall getNombreDeclaracionIDTerminalRuleCall_0_1() { return cNombreDeclaracionIDTerminalRuleCall_0_1; }
	}
	public class ValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Valor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalistoMapValorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprMapOperacionesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Valor:
		//    (Expresion | CalistoMapValor | ExprMapOperaciones)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Expresion | CalistoMapValor | ExprMapOperaciones)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expresion
		public RuleCall getExpresionParserRuleCall_0() { return cExpresionParserRuleCall_0; }
		
		//CalistoMapValor
		public RuleCall getCalistoMapValorParserRuleCall_1() { return cCalistoMapValorParserRuleCall_1; }
		
		//ExprMapOperaciones
		public RuleCall getExprMapOperacionesParserRuleCall_2() { return cExprMapOperacionesParserRuleCall_2; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprConcatenacionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprLogicaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLlamadoFuncParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEstrellaFugazMeteoroParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstanteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLlamadoMapaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expresion:
		//    ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | EstrellaFugazMeteoro | Constante | LlamadoMapa
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | EstrellaFugazMeteoro | Constante | LlamadoMapa
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprConcatenacion
		public RuleCall getExprConcatenacionParserRuleCall_0() { return cExprConcatenacionParserRuleCall_0; }
		
		//ExprAritmetica
		public RuleCall getExprAritmeticaParserRuleCall_1() { return cExprAritmeticaParserRuleCall_1; }
		
		//ExprLogica
		public RuleCall getExprLogicaParserRuleCall_2() { return cExprLogicaParserRuleCall_2; }
		
		//LlamadoFunc
		public RuleCall getLlamadoFuncParserRuleCall_3() { return cLlamadoFuncParserRuleCall_3; }
		
		//EstrellaFugazMeteoro
		public RuleCall getEstrellaFugazMeteoroParserRuleCall_4() { return cEstrellaFugazMeteoroParserRuleCall_4; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_5() { return cConstanteParserRuleCall_5; }
		
		//LlamadoMapa
		public RuleCall getLlamadoMapaParserRuleCall_6() { return cLlamadoMapaParserRuleCall_6; }
	}
	public class ExprMapOperacionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprMapOperaciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMapRemoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprMapOperaciones:
		//    MapAdd | MapRemove
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MapAdd | MapRemove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MapAdd
		public RuleCall getMapAddParserRuleCall_0() { return cMapAddParserRuleCall_0; }
		
		//MapRemove
		public RuleCall getMapRemoveParserRuleCall_1() { return cMapRemoveParserRuleCall_1; }
	}
	public class MapAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.MapAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAddAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperadorAddPlusSignKeyword_1_0 = (Keyword)cOperadorAddAssignment_1.eContents().get(0);
		private final Assignment cMapConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapConstConstanteParserRuleCall_2_0 = (RuleCall)cMapConstAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeyExpresionParserRuleCall_4_0_0 = (RuleCall)cKeyAssignment_4_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueExpresionParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cKeyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cKeyExpresionParserRuleCall_6_1_0 = (RuleCall)cKeyAssignment_6_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cValueAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cValueExpresionParserRuleCall_6_3_0 = (RuleCall)cValueAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MapAdd:
		//    '(' operadorAdd = ('+') mapConst=Constante '(' (key+=Expresion '->' value+=Expresion) ')' ('('  key+=Expresion '->' value+=Expresion ')')* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operadorAdd = ('+') mapConst=Constante '(' (key+=Expresion '->' value+=Expresion) ')' ('('  key+=Expresion '->' value+=Expresion ')')* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operadorAdd = ('+')
		public Assignment getOperadorAddAssignment_1() { return cOperadorAddAssignment_1; }
		
		//('+')
		public Keyword getOperadorAddPlusSignKeyword_1_0() { return cOperadorAddPlusSignKeyword_1_0; }
		
		//mapConst=Constante
		public Assignment getMapConstAssignment_2() { return cMapConstAssignment_2; }
		
		//Constante
		public RuleCall getMapConstConstanteParserRuleCall_2_0() { return cMapConstConstanteParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(key+=Expresion '->' value+=Expresion)
		public Group getGroup_4() { return cGroup_4; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_4_0() { return cKeyAssignment_4_0; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_4_0_0() { return cKeyExpresionParserRuleCall_4_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_1() { return cHyphenMinusGreaterThanSignKeyword_4_1; }
		
		//value+=Expresion
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }
		
		//Expresion
		public RuleCall getValueExpresionParserRuleCall_4_2_0() { return cValueExpresionParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('('  key+=Expresion '->' value+=Expresion ')')*
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_6_1() { return cKeyAssignment_6_1; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_6_1_0() { return cKeyExpresionParserRuleCall_6_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_2() { return cHyphenMinusGreaterThanSignKeyword_6_2; }
		
		//value+=Expresion
		public Assignment getValueAssignment_6_3() { return cValueAssignment_6_3; }
		
		//Expresion
		public RuleCall getValueExpresionParserRuleCall_6_3_0() { return cValueExpresionParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class MapRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.MapRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperadorAddAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperadorAddHyphenMinusKeyword_1_0 = (Keyword)cOperadorAddAssignment_1.eContents().get(0);
		private final Assignment cMapConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapConstConstanteParserRuleCall_2_0 = (RuleCall)cMapConstAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyExpresionParserRuleCall_4_0 = (RuleCall)cKeyAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cKeyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cKeyExpresionParserRuleCall_6_1_0 = (RuleCall)cKeyAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MapRemove:
		//    '(' operadorAdd = ('-') mapConst=Constante '(' key+=Expresion ')' ( '(' key+=Expresion ')' )* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operadorAdd = ('-') mapConst=Constante '(' key+=Expresion ')' ( '(' key+=Expresion ')' )* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operadorAdd = ('-')
		public Assignment getOperadorAddAssignment_1() { return cOperadorAddAssignment_1; }
		
		//('-')
		public Keyword getOperadorAddHyphenMinusKeyword_1_0() { return cOperadorAddHyphenMinusKeyword_1_0; }
		
		//mapConst=Constante
		public Assignment getMapConstAssignment_2() { return cMapConstAssignment_2; }
		
		//Constante
		public RuleCall getMapConstConstanteParserRuleCall_2_0() { return cMapConstConstanteParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_4() { return cKeyAssignment_4; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_4_0() { return cKeyExpresionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//( '(' key+=Expresion ')' )*
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_6_1() { return cKeyAssignment_6_1; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_6_1_0() { return cKeyExpresionParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExprConcatenacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprConcatenacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperadorConAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cOperadorConPlusSignPlusSignKeyword_0_1_0_0 = (Keyword)cOperadorConAssignment_0_1_0.eContents().get(0);
		private final Assignment cExprConAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExprConExpresionParserRuleCall_0_1_1_0 = (RuleCall)cExprConAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cConstelacionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cEstrellaParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ExprConcatenacion:
		//    '('(operadorCon = ('++') (exprCon+=(Expresion))+) ')' |  (Constelacion | Estrella)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorCon = ('++') (exprCon+=(Expresion))+) ')' |  (Constelacion | Estrella)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('(operadorCon = ('++') (exprCon+=(Expresion))+) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(operadorCon = ('++') (exprCon+=(Expresion))+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operadorCon = ('++')
		public Assignment getOperadorConAssignment_0_1_0() { return cOperadorConAssignment_0_1_0; }
		
		//('++')
		public Keyword getOperadorConPlusSignPlusSignKeyword_0_1_0_0() { return cOperadorConPlusSignPlusSignKeyword_0_1_0_0; }
		
		//(exprCon+=(Expresion))+
		public Assignment getExprConAssignment_0_1_1() { return cExprConAssignment_0_1_1; }
		
		//(Expresion)
		public RuleCall getExprConExpresionParserRuleCall_0_1_1_0() { return cExprConExpresionParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//(Constelacion | Estrella)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Constelacion
		public RuleCall getConstelacionParserRuleCall_1_0() { return cConstelacionParserRuleCall_1_0; }
		
		//Estrella
		public RuleCall getEstrellaParserRuleCall_1_1() { return cEstrellaParserRuleCall_1_1; }
	}
	public class ExprAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprAritmetica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperadorArAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Alternatives cOperadorArAlternatives_0_1_0_0 = (Alternatives)cOperadorArAssignment_0_1_0.eContents().get(0);
		private final Keyword cOperadorArPlusSignKeyword_0_1_0_0_0 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(0);
		private final Keyword cOperadorArHyphenMinusKeyword_0_1_0_0_1 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(1);
		private final Keyword cOperadorArSolidusKeyword_0_1_0_0_2 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(2);
		private final Keyword cOperadorArAsteriskKeyword_0_1_0_0_3 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(3);
		private final Keyword cOperadorArPercentSignKeyword_0_1_0_0_4 = (Keyword)cOperadorArAlternatives_0_1_0_0.eContents().get(4);
		private final Assignment cExprArAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExprArExpresionParserRuleCall_0_1_1_0 = (RuleCall)cExprArAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cPlanetaParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPolvoEstelarParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//ExprAritmetica:
		//    '('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+) ')' |  (Planeta | PolvoEstelar)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+) ')' |  (Planeta | PolvoEstelar)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operadorAr = ('+' | '-' | '/' | '*' | '%')
		public Assignment getOperadorArAssignment_0_1_0() { return cOperadorArAssignment_0_1_0; }
		
		//('+' | '-' | '/' | '*' | '%')
		public Alternatives getOperadorArAlternatives_0_1_0_0() { return cOperadorArAlternatives_0_1_0_0; }
		
		//'+'
		public Keyword getOperadorArPlusSignKeyword_0_1_0_0_0() { return cOperadorArPlusSignKeyword_0_1_0_0_0; }
		
		//'-'
		public Keyword getOperadorArHyphenMinusKeyword_0_1_0_0_1() { return cOperadorArHyphenMinusKeyword_0_1_0_0_1; }
		
		//'/'
		public Keyword getOperadorArSolidusKeyword_0_1_0_0_2() { return cOperadorArSolidusKeyword_0_1_0_0_2; }
		
		//'*'
		public Keyword getOperadorArAsteriskKeyword_0_1_0_0_3() { return cOperadorArAsteriskKeyword_0_1_0_0_3; }
		
		//'%'
		public Keyword getOperadorArPercentSignKeyword_0_1_0_0_4() { return cOperadorArPercentSignKeyword_0_1_0_0_4; }
		
		//(exprAr+=(Expresion))+
		public Assignment getExprArAssignment_0_1_1() { return cExprArAssignment_0_1_1; }
		
		//(Expresion)
		public RuleCall getExprArExpresionParserRuleCall_0_1_1_0() { return cExprArExpresionParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//(Planeta | PolvoEstelar)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Planeta
		public RuleCall getPlanetaParserRuleCall_1_0() { return cPlanetaParserRuleCall_1_0; }
		
		//PolvoEstelar
		public RuleCall getPolvoEstelarParserRuleCall_1_1() { return cPolvoEstelarParserRuleCall_1_1; }
	}
	public class ExprLogicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprLogica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegadoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegadoExclamationMarkKeyword_0_0 = (Keyword)cNegadoAssignment_0.eContents().get(0);
		private final Assignment cExprLogAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cExprLogAlternatives_1_0 = (Alternatives)cExprLogAssignment_1.eContents().get(0);
		private final RuleCall cExprLogExprLogicaOperadoresParserRuleCall_1_0_0 = (RuleCall)cExprLogAlternatives_1_0.eContents().get(0);
		private final RuleCall cExprLogLunaParserRuleCall_1_0_1 = (RuleCall)cExprLogAlternatives_1_0.eContents().get(1);
		private final RuleCall cExprLogExprComparacionParserRuleCall_1_0_2 = (RuleCall)cExprLogAlternatives_1_0.eContents().get(2);
		private final RuleCall cExprLogXORParserRuleCall_1_0_3 = (RuleCall)cExprLogAlternatives_1_0.eContents().get(3);
		
		//ExprLogica:
		//   (Negado ?= '!')? exprLog=(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Negado ?= '!')? exprLog=(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
		public Group getGroup() { return cGroup; }
		
		//(Negado ?= '!')?
		public Assignment getNegadoAssignment_0() { return cNegadoAssignment_0; }
		
		//'!'
		public Keyword getNegadoExclamationMarkKeyword_0_0() { return cNegadoExclamationMarkKeyword_0_0; }
		
		//exprLog=(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
		public Assignment getExprLogAssignment_1() { return cExprLogAssignment_1; }
		
		//(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
		public Alternatives getExprLogAlternatives_1_0() { return cExprLogAlternatives_1_0; }
		
		//ExprLogicaOperadores
		public RuleCall getExprLogExprLogicaOperadoresParserRuleCall_1_0_0() { return cExprLogExprLogicaOperadoresParserRuleCall_1_0_0; }
		
		//Luna
		public RuleCall getExprLogLunaParserRuleCall_1_0_1() { return cExprLogLunaParserRuleCall_1_0_1; }
		
		//ExprComparacion
		public RuleCall getExprLogExprComparacionParserRuleCall_1_0_2() { return cExprLogExprComparacionParserRuleCall_1_0_2; }
		
		//XOR
		public RuleCall getExprLogXORParserRuleCall_1_0_3() { return cExprLogXORParserRuleCall_1_0_3; }
	}
	public class ExprLogicaOperadoresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprLogicaOperadores");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperadorLogAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperadorLogAlternatives_1_0_0 = (Alternatives)cOperadorLogAssignment_1_0.eContents().get(0);
		private final Keyword cOperadorLogAmpersandAmpersandKeyword_1_0_0_0 = (Keyword)cOperadorLogAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperadorLogVerticalLineVerticalLineKeyword_1_0_0_1 = (Keyword)cOperadorLogAlternatives_1_0_0.eContents().get(1);
		private final Assignment cExprLogsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprLogsExpresionParserRuleCall_1_1_0 = (RuleCall)cExprLogsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExprLogicaOperadores:
		//    (('('(operadorLog = ( '&&' | '||' ) (exprLogs+=(Expresion))+) ')' ))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(('('(operadorLog = ( '&&' | '||' ) (exprLogs+=(Expresion))+) ')' ))
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(operadorLog = ( '&&' | '||' ) (exprLogs+=(Expresion))+)
		public Group getGroup_1() { return cGroup_1; }
		
		//operadorLog = ( '&&' | '||' )
		public Assignment getOperadorLogAssignment_1_0() { return cOperadorLogAssignment_1_0; }
		
		//( '&&' | '||' )
		public Alternatives getOperadorLogAlternatives_1_0_0() { return cOperadorLogAlternatives_1_0_0; }
		
		//'&&'
		public Keyword getOperadorLogAmpersandAmpersandKeyword_1_0_0_0() { return cOperadorLogAmpersandAmpersandKeyword_1_0_0_0; }
		
		//'||'
		public Keyword getOperadorLogVerticalLineVerticalLineKeyword_1_0_0_1() { return cOperadorLogVerticalLineVerticalLineKeyword_1_0_0_1; }
		
		//(exprLogs+=(Expresion))+
		public Assignment getExprLogsAssignment_1_1() { return cExprLogsAssignment_1_1; }
		
		//(Expresion)
		public RuleCall getExprLogsExpresionParserRuleCall_1_1_0() { return cExprLogsExpresionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class XORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.XOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperadorXORAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperadorXORDollarSignDollarSignKeyword_1_0_0 = (Keyword)cOperadorXORAssignment_1_0.eContents().get(0);
		private final Assignment cExprLogIzqAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprLogIzqExpresionParserRuleCall_1_1_0 = (RuleCall)cExprLogIzqAssignment_1_1.eContents().get(0);
		private final Assignment cExprLogDerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprLogDerExpresionParserRuleCall_1_2_0 = (RuleCall)cExprLogDerAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XOR:
		//    '('(operadorXOR = '$$' exprLogIzq=(Expresion) exprLogDer=(Expresion)) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorXOR = '$$' exprLogIzq=(Expresion) exprLogDer=(Expresion)) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(operadorXOR = '$$' exprLogIzq=(Expresion) exprLogDer=(Expresion))
		public Group getGroup_1() { return cGroup_1; }
		
		//operadorXOR = '$$'
		public Assignment getOperadorXORAssignment_1_0() { return cOperadorXORAssignment_1_0; }
		
		//'$$'
		public Keyword getOperadorXORDollarSignDollarSignKeyword_1_0_0() { return cOperadorXORDollarSignDollarSignKeyword_1_0_0; }
		
		//exprLogIzq=(Expresion)
		public Assignment getExprLogIzqAssignment_1_1() { return cExprLogIzqAssignment_1_1; }
		
		//(Expresion)
		public RuleCall getExprLogIzqExpresionParserRuleCall_1_1_0() { return cExprLogIzqExpresionParserRuleCall_1_1_0; }
		
		//exprLogDer=(Expresion)
		public Assignment getExprLogDerAssignment_1_2() { return cExprLogDerAssignment_1_2; }
		
		//(Expresion)
		public RuleCall getExprLogDerExpresionParserRuleCall_1_2_0() { return cExprLogDerExpresionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExprComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprComparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperadorCompAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperadorCompAlternatives_1_0_0 = (Alternatives)cOperadorCompAssignment_1_0.eContents().get(0);
		private final Keyword cOperadorCompLessThanSignKeyword_1_0_0_0 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperadorCompGreaterThanSignKeyword_1_0_0_1 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(3);
		private final Keyword cOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(4);
		private final Keyword cOperadorCompTildeEqualsSignKeyword_1_0_0_5 = (Keyword)cOperadorCompAlternatives_1_0_0.eContents().get(5);
		private final Assignment cExprComIzqAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprComIzqExpresionParserRuleCall_1_1_0 = (RuleCall)cExprComIzqAssignment_1_1.eContents().get(0);
		private final Assignment cExprComDerAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprComDerExpresionParserRuleCall_1_2_0 = (RuleCall)cExprComDerAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExprComparacion:
		//    '('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=') exprComIzq=(Expresion) exprComDer=(Expresion))
		public Group getGroup_1() { return cGroup_1; }
		
		//operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=')
		public Assignment getOperadorCompAssignment_1_0() { return cOperadorCompAssignment_1_0; }
		
		//('<' | '>' | '<=' | '>=' | '==' | '~=')
		public Alternatives getOperadorCompAlternatives_1_0_0() { return cOperadorCompAlternatives_1_0_0; }
		
		//'<'
		public Keyword getOperadorCompLessThanSignKeyword_1_0_0_0() { return cOperadorCompLessThanSignKeyword_1_0_0_0; }
		
		//'>'
		public Keyword getOperadorCompGreaterThanSignKeyword_1_0_0_1() { return cOperadorCompGreaterThanSignKeyword_1_0_0_1; }
		
		//'<='
		public Keyword getOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2() { return cOperadorCompLessThanSignEqualsSignKeyword_1_0_0_2; }
		
		//'>='
		public Keyword getOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3() { return cOperadorCompGreaterThanSignEqualsSignKeyword_1_0_0_3; }
		
		//'=='
		public Keyword getOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4() { return cOperadorCompEqualsSignEqualsSignKeyword_1_0_0_4; }
		
		//'~='
		public Keyword getOperadorCompTildeEqualsSignKeyword_1_0_0_5() { return cOperadorCompTildeEqualsSignKeyword_1_0_0_5; }
		
		//exprComIzq=(Expresion)
		public Assignment getExprComIzqAssignment_1_1() { return cExprComIzqAssignment_1_1; }
		
		//(Expresion)
		public RuleCall getExprComIzqExpresionParserRuleCall_1_1_0() { return cExprComIzqExpresionParserRuleCall_1_1_0; }
		
		//exprComDer=(Expresion)
		public Assignment getExprComDerAssignment_1_2() { return cExprComDerAssignment_1_2; }
		
		//(Expresion)
		public RuleCall getExprComDerExpresionParserRuleCall_1_2_0() { return cExprComDerExpresionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PrimitivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Primitivo");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTipoAlternatives_0 = (Alternatives)cTipoAssignment.eContents().get(0);
		private final Keyword cTipoPlanetaKeyword_0_0 = (Keyword)cTipoAlternatives_0.eContents().get(0);
		private final Keyword cTipoConstelacionKeyword_0_1 = (Keyword)cTipoAlternatives_0.eContents().get(1);
		private final Keyword cTipoEstrellaKeyword_0_2 = (Keyword)cTipoAlternatives_0.eContents().get(2);
		private final Keyword cTipoPolvoEstelarKeyword_0_3 = (Keyword)cTipoAlternatives_0.eContents().get(3);
		private final Keyword cTipoLunaKeyword_0_4 = (Keyword)cTipoAlternatives_0.eContents().get(4);
		
		//Primitivo:
		//    tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna')
		public Assignment getTipoAssignment() { return cTipoAssignment; }
		
		//('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna')
		public Alternatives getTipoAlternatives_0() { return cTipoAlternatives_0; }
		
		//'Planeta'
		public Keyword getTipoPlanetaKeyword_0_0() { return cTipoPlanetaKeyword_0_0; }
		
		//'Constelacion'
		public Keyword getTipoConstelacionKeyword_0_1() { return cTipoConstelacionKeyword_0_1; }
		
		//'Estrella'
		public Keyword getTipoEstrellaKeyword_0_2() { return cTipoEstrellaKeyword_0_2; }
		
		//'PolvoEstelar'
		public Keyword getTipoPolvoEstelarKeyword_0_3() { return cTipoPolvoEstelarKeyword_0_3; }
		
		//'Luna'
		public Keyword getTipoLunaKeyword_0_4() { return cTipoLunaKeyword_0_4; }
	}
	public class TipoFuncionOrdenSuperiorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.TipoFuncionOrdenSuperior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cOrdenSuperiorTipoAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0 = (Keyword)cOrdenSuperiorTipoAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cParamFuncAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cParamFuncObjetoParserRuleCall_0_0_1_0_0 = (RuleCall)cParamFuncAssignment_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1_1 = (Group)cGroup_0_0_1.eContents().get(1);
		private final Keyword cDollarSignKeyword_0_0_1_1_0 = (Keyword)cGroup_0_0_1_1.eContents().get(0);
		private final Assignment cParamFuncAssignment_0_0_1_1_1 = (Assignment)cGroup_0_0_1_1.eContents().get(1);
		private final RuleCall cParamFuncObjetoParserRuleCall_0_0_1_1_1_0 = (RuleCall)cParamFuncAssignment_0_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final RuleCall cObjetoParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReturnTipoFuncAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cReturnTipoFuncAssignment_1_0.eContents().get(0);
		private final Assignment cReturnFuncAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReturnFuncPrimitivoParserRuleCall_1_1_0 = (RuleCall)cReturnFuncAssignment_1_1.eContents().get(0);
		
		//TipoFuncionOrdenSuperior:
		//    (ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')' | Objeto)
		//    (returnTipoFunc ?= '->' returnFunc=(Primitivo) )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')' | Objeto)
		//(returnTipoFunc ?= '->' returnFunc=(Primitivo) )?
		public Group getGroup() { return cGroup; }
		
		//(ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')' | Objeto)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ordenSuperiorTipo = '('
		public Assignment getOrdenSuperiorTipoAssignment_0_0_0() { return cOrdenSuperiorTipoAssignment_0_0_0; }
		
		//'('
		public Keyword getOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0() { return cOrdenSuperiorTipoLeftParenthesisKeyword_0_0_0_0; }
		
		//(paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//paramFunc+=(Objeto)
		public Assignment getParamFuncAssignment_0_0_1_0() { return cParamFuncAssignment_0_0_1_0; }
		
		//(Objeto)
		public RuleCall getParamFuncObjetoParserRuleCall_0_0_1_0_0() { return cParamFuncObjetoParserRuleCall_0_0_1_0_0; }
		
		//('$' paramFunc+=Objeto)*
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_0_0_1_1_0() { return cDollarSignKeyword_0_0_1_1_0; }
		
		//paramFunc+=Objeto
		public Assignment getParamFuncAssignment_0_0_1_1_1() { return cParamFuncAssignment_0_0_1_1_1; }
		
		//Objeto
		public RuleCall getParamFuncObjetoParserRuleCall_0_0_1_1_1_0() { return cParamFuncObjetoParserRuleCall_0_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }
		
		//Objeto
		public RuleCall getObjetoParserRuleCall_0_1() { return cObjetoParserRuleCall_0_1; }
		
		//(returnTipoFunc ?= '->' returnFunc=(Primitivo) )?
		public Group getGroup_1() { return cGroup_1; }
		
		//returnTipoFunc ?= '->'
		public Assignment getReturnTipoFuncAssignment_1_0() { return cReturnTipoFuncAssignment_1_0; }
		
		//'->'
		public Keyword getReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0() { return cReturnTipoFuncHyphenMinusGreaterThanSignKeyword_1_0_0; }
		
		//returnFunc=(Primitivo)
		public Assignment getReturnFuncAssignment_1_1() { return cReturnFuncAssignment_1_1; }
		
		//(Primitivo)
		public RuleCall getReturnFuncPrimitivoParserRuleCall_1_1_0() { return cReturnFuncPrimitivoParserRuleCall_1_1_0; }
	}
	public class PlanetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Planeta");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//Planeta: /* int */
		//    x = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///* int */
		//   x = INT
		public Assignment getXAssignment() { return cXAssignment; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_0() { return cXINTTerminalRuleCall_0; }
	}
	public class ConstelacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Constelacion");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXSTRINGTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//Constelacion: /* string */
		//    x = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///* string */
		//   x = STRING
		public Assignment getXAssignment() { return cXAssignment; }
		
		//STRING
		public RuleCall getXSTRINGTerminalRuleCall_0() { return cXSTRINGTerminalRuleCall_0; }
	}
	public class EstrellaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Estrella");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXCHARTerminalRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//Estrella:
		//    x = CHAR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = CHAR
		public Assignment getXAssignment() { return cXAssignment; }
		
		//CHAR
		public RuleCall getXCHARTerminalRuleCall_0() { return cXCHARTerminalRuleCall_0; }
	}
	public class PolvoEstelarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.PolvoEstelar");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXDoubleParserRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//PolvoEstelar:
		//    x = Double
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = Double
		public Assignment getXAssignment() { return cXAssignment; }
		
		//Double
		public RuleCall getXDoubleParserRuleCall_0() { return cXDoubleParserRuleCall_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//    INT '.' INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Luna");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cXAlternatives_0 = (Alternatives)cXAssignment.eContents().get(0);
		private final Keyword cXLunaNuevaKeyword_0_0 = (Keyword)cXAlternatives_0.eContents().get(0);
		private final Keyword cXLunaLlenaKeyword_0_1 = (Keyword)cXAlternatives_0.eContents().get(1);
		
		//Luna:
		//    x = ('LunaNueva' | 'LunaLlena')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = ('LunaNueva' | 'LunaLlena')
		public Assignment getXAssignment() { return cXAssignment; }
		
		//('LunaNueva' | 'LunaLlena')
		public Alternatives getXAlternatives_0() { return cXAlternatives_0; }
		
		//'LunaNueva'
		public Keyword getXLunaNuevaKeyword_0_0() { return cXLunaNuevaKeyword_0_0; }
		
		//'LunaLlena'
		public Keyword getXLunaLlenaKeyword_0_1() { return cXLunaLlenaKeyword_0_1; }
	}
	public class CalistoMapTipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.CalistoMapTipo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalistoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTipoIzqAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTipoIzqPrimitivoParserRuleCall_2_0_0 = (RuleCall)cTipoIzqAssignment_2_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTipoDerAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTipoDerPrimitivoParserRuleCall_2_2_0 = (RuleCall)cTipoDerAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CalistoMapTipo: //mapa -> entrada con la declaracion de tipos
		//     'Calisto' '[' (tipoIzq=Primitivo '$' tipoDer=Primitivo) ']'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		////mapa -> entrada con la declaracion de tipos
		//    'Calisto' '[' (tipoIzq=Primitivo '$' tipoDer=Primitivo) ']'
		public Group getGroup() { return cGroup; }
		
		////mapa -> entrada con la declaracion de tipos
		//    'Calisto'
		public Keyword getCalistoKeyword_0() { return cCalistoKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(tipoIzq=Primitivo '$' tipoDer=Primitivo)
		public Group getGroup_2() { return cGroup_2; }
		
		//tipoIzq=Primitivo
		public Assignment getTipoIzqAssignment_2_0() { return cTipoIzqAssignment_2_0; }
		
		//Primitivo
		public RuleCall getTipoIzqPrimitivoParserRuleCall_2_0_0() { return cTipoIzqPrimitivoParserRuleCall_2_0_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_2_1() { return cDollarSignKeyword_2_1; }
		
		//tipoDer=Primitivo
		public Assignment getTipoDerAssignment_2_2() { return cTipoDerAssignment_2_2; }
		
		//Primitivo
		public RuleCall getTipoDerPrimitivoParserRuleCall_2_2_0() { return cTipoDerPrimitivoParserRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class CalistoMapValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.CalistoMapValor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCalistoMapValorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalistoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cKeyAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cKeyExpresionParserRuleCall_3_0_0_0 = (RuleCall)cKeyAssignment_3_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cValueAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cValueExpresionParserRuleCall_3_0_2_0 = (RuleCall)cValueAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDollarSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cKeyAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cKeyExpresionParserRuleCall_3_1_1_0 = (RuleCall)cKeyAssignment_3_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cValueAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cValueExpresionParserRuleCall_3_1_3_0 = (RuleCall)cValueAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CalistoMapValor: //mapa -> salida con tipos asignados
		//     {CalistoMapValor} 'Calisto' '(' ((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////mapa -> salida con tipos asignados
		//    {CalistoMapValor} 'Calisto' '(' ((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)? ')'
		public Group getGroup() { return cGroup; }
		
		////mapa -> salida con tipos asignados
		//    {CalistoMapValor}
		public Action getCalistoMapValorAction_0() { return cCalistoMapValorAction_0; }
		
		//'Calisto'
		public Keyword getCalistoKeyword_1() { return cCalistoKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(key+=Expresion '->' value+=Expresion)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_3_0_0() { return cKeyAssignment_3_0_0; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_3_0_0_0() { return cKeyExpresionParserRuleCall_3_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0_1() { return cHyphenMinusGreaterThanSignKeyword_3_0_1; }
		
		//value+=Expresion
		public Assignment getValueAssignment_3_0_2() { return cValueAssignment_3_0_2; }
		
		//Expresion
		public RuleCall getValueExpresionParserRuleCall_3_0_2_0() { return cValueExpresionParserRuleCall_3_0_2_0; }
		
		//('$' key+=Expresion '->' value+=Expresion)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_3_1_0() { return cDollarSignKeyword_3_1_0; }
		
		//key+=Expresion
		public Assignment getKeyAssignment_3_1_1() { return cKeyAssignment_3_1_1; }
		
		//Expresion
		public RuleCall getKeyExpresionParserRuleCall_3_1_1_0() { return cKeyExpresionParserRuleCall_3_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1_2() { return cHyphenMinusGreaterThanSignKeyword_3_1_2; }
		
		//value+=Expresion
		public Assignment getValueAssignment_3_1_3() { return cValueAssignment_3_1_3; }
		
		//Expresion
		public RuleCall getValueExpresionParserRuleCall_3_1_3_0() { return cValueExpresionParserRuleCall_3_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final ObjetoElements pObjeto;
	private final PrintElements pPrint;
	private final InstruccionesElements pInstrucciones;
	private final EstrellaFugazMeteoroElements pEstrellaFugazMeteoro;
	private final LlamadoFuncElements pLlamadoFunc;
	private final LlamadoMapaElements pLlamadoMapa;
	private final DeclaracionElements pDeclaracion;
	private final FuncionElements pFuncion;
	private final AsignacionElements pAsignacion;
	private final ParamElements pParam;
	private final ConstanteElements pConstante;
	private final ValorElements pValor;
	private final ExpresionElements pExpresion;
	private final ExprMapOperacionesElements pExprMapOperaciones;
	private final MapAddElements pMapAdd;
	private final MapRemoveElements pMapRemove;
	private final ExprConcatenacionElements pExprConcatenacion;
	private final ExprAritmeticaElements pExprAritmetica;
	private final ExprLogicaElements pExprLogica;
	private final ExprLogicaOperadoresElements pExprLogicaOperadores;
	private final XORElements pXOR;
	private final ExprComparacionElements pExprComparacion;
	private final PrimitivoElements pPrimitivo;
	private final TipoFuncionOrdenSuperiorElements pTipoFuncionOrdenSuperior;
	private final PlanetaElements pPlaneta;
	private final ConstelacionElements pConstelacion;
	private final TerminalRule tCHAR;
	private final EstrellaElements pEstrella;
	private final PolvoEstelarElements pPolvoEstelar;
	private final DoubleElements pDouble;
	private final LunaElements pLuna;
	private final CalistoMapTipoElements pCalistoMapTipo;
	private final CalistoMapValorElements pCalistoMapValor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DymeLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pObjeto = new ObjetoElements();
		this.pPrint = new PrintElements();
		this.pInstrucciones = new InstruccionesElements();
		this.pEstrellaFugazMeteoro = new EstrellaFugazMeteoroElements();
		this.pLlamadoFunc = new LlamadoFuncElements();
		this.pLlamadoMapa = new LlamadoMapaElements();
		this.pDeclaracion = new DeclaracionElements();
		this.pFuncion = new FuncionElements();
		this.pAsignacion = new AsignacionElements();
		this.pParam = new ParamElements();
		this.pConstante = new ConstanteElements();
		this.pValor = new ValorElements();
		this.pExpresion = new ExpresionElements();
		this.pExprMapOperaciones = new ExprMapOperacionesElements();
		this.pMapAdd = new MapAddElements();
		this.pMapRemove = new MapRemoveElements();
		this.pExprConcatenacion = new ExprConcatenacionElements();
		this.pExprAritmetica = new ExprAritmeticaElements();
		this.pExprLogica = new ExprLogicaElements();
		this.pExprLogicaOperadores = new ExprLogicaOperadoresElements();
		this.pXOR = new XORElements();
		this.pExprComparacion = new ExprComparacionElements();
		this.pPrimitivo = new PrimitivoElements();
		this.pTipoFuncionOrdenSuperior = new TipoFuncionOrdenSuperiorElements();
		this.pPlaneta = new PlanetaElements();
		this.pConstelacion = new ConstelacionElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.CHAR");
		this.pEstrella = new EstrellaElements();
		this.pPolvoEstelar = new PolvoEstelarElements();
		this.pDouble = new DoubleElements();
		this.pLuna = new LunaElements();
		this.pCalistoMapTipo = new CalistoMapTipoElements();
		this.pCalistoMapValor = new CalistoMapValorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.DymeLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////    greetings+=Greeting*;
	////
	////Greeting:
	////    'Hello' name=ID '!';
	//Programa:
	//    'GALAXIA' name=ID
	//    (prog+=Instrucciones)*
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Objeto:
	//    (CalistoMapTipo | Primitivo)
	//;
	public ObjetoElements getObjetoAccess() {
		return pObjeto;
	}
	
	public ParserRule getObjetoRule() {
		return getObjetoAccess().getRule();
	}
	
	//Print:
	//    printTipo=('Mensaje' | 'MensajeLineal') '(' (val=Valor) ')'
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Instrucciones:
	//    (Declaracion | Valor)
	//;
	public InstruccionesElements getInstruccionesAccess() {
		return pInstrucciones;
	}
	
	public ParserRule getInstruccionesRule() {
		return getInstruccionesAccess().getRule();
	}
	
	//EstrellaFugazMeteoro: //If
	//     ("EstrellaFugaz" '(' exprLogCondicion=(Expresion)')' estrellaFugazRes = Expresion)
	//     ("Meteoro" meteoroRes = Expresion)
	// ;
	public EstrellaFugazMeteoroElements getEstrellaFugazMeteoroAccess() {
		return pEstrellaFugazMeteoro;
	}
	
	public ParserRule getEstrellaFugazMeteoroRule() {
		return getEstrellaFugazMeteoroAccess().getRule();
	}
	
	//LlamadoFunc:
	//    funcionID=[Declaracion] '{' (args+=(Valor) ('$' args+=(Valor))*)? '}'
	//;
	public LlamadoFuncElements getLlamadoFuncAccess() {
		return pLlamadoFunc;
	}
	
	public ParserRule getLlamadoFuncRule() {
		return getLlamadoFuncAccess().getRule();
	}
	
	//LlamadoMapa:
	//    decID=[Declaracion] '[' mapKey=Expresion ']'
	//;
	public LlamadoMapaElements getLlamadoMapaAccess() {
		return pLlamadoMapa;
	}
	
	public ParserRule getLlamadoMapaRule() {
		return getLlamadoMapaAccess().getRule();
	}
	
	//Declaracion:
	//    (Asignacion | Funcion | Param | Print)
	//;
	public DeclaracionElements getDeclaracionAccess() {
		return pDeclaracion;
	}
	
	public ParserRule getDeclaracionRule() {
		return getDeclaracionAccess().getRule();
	}
	
	//Funcion:
	//    (gusano ?= 'Agujero' 'de' 'Gusano')?
	//    'CASIMIR' name=ID ('CONSUME'  param+=Param ('$' param+=Param)*)? 'CONVERGE'
	//    (declar+=(Declaracion))*
	//    (val=(Valor))
	//    "GUT" (tipoInferido ?= '->' tipoClass=Primitivo)?
	//;
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}
	
	//Asignacion:
	//    'MASA' name=ID (tipoInferido ?= 'es' tipoClass=Objeto)?  '<-' valorAsig=Valor
	//;
	public AsignacionElements getAsignacionAccess() {
		return pAsignacion;
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}
	
	//Param:
	//    name=ID 'es' ('(' (param+=(TipoFuncionOrdenSuperior) ('$' param+=TipoFuncionOrdenSuperior)*)? ')' | param+=Objeto) (tipoRetorno ?= '->' returnTipo=Primitivo)?
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Constante:
	//    nombre=[Declaracion]
	//;
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}
	
	//Valor:
	//    (Expresion | CalistoMapValor | ExprMapOperaciones)
	//;
	public ValorElements getValorAccess() {
		return pValor;
	}
	
	public ParserRule getValorRule() {
		return getValorAccess().getRule();
	}
	
	//Expresion:
	//    ExprConcatenacion | ExprAritmetica | ExprLogica | LlamadoFunc | EstrellaFugazMeteoro | Constante | LlamadoMapa
	//;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//ExprMapOperaciones:
	//    MapAdd | MapRemove
	//;
	public ExprMapOperacionesElements getExprMapOperacionesAccess() {
		return pExprMapOperaciones;
	}
	
	public ParserRule getExprMapOperacionesRule() {
		return getExprMapOperacionesAccess().getRule();
	}
	
	//MapAdd:
	//    '(' operadorAdd = ('+') mapConst=Constante '(' (key+=Expresion '->' value+=Expresion) ')' ('('  key+=Expresion '->' value+=Expresion ')')* ')'
	//;
	public MapAddElements getMapAddAccess() {
		return pMapAdd;
	}
	
	public ParserRule getMapAddRule() {
		return getMapAddAccess().getRule();
	}
	
	//MapRemove:
	//    '(' operadorAdd = ('-') mapConst=Constante '(' key+=Expresion ')' ( '(' key+=Expresion ')' )* ')'
	//;
	public MapRemoveElements getMapRemoveAccess() {
		return pMapRemove;
	}
	
	public ParserRule getMapRemoveRule() {
		return getMapRemoveAccess().getRule();
	}
	
	//ExprConcatenacion:
	//    '('(operadorCon = ('++') (exprCon+=(Expresion))+) ')' |  (Constelacion | Estrella)
	//;
	public ExprConcatenacionElements getExprConcatenacionAccess() {
		return pExprConcatenacion;
	}
	
	public ParserRule getExprConcatenacionRule() {
		return getExprConcatenacionAccess().getRule();
	}
	
	//ExprAritmetica:
	//    '('(operadorAr = ('+' | '-' | '/' | '*' | '%')  (exprAr+=(Expresion))+) ')' |  (Planeta | PolvoEstelar)
	//;
	public ExprAritmeticaElements getExprAritmeticaAccess() {
		return pExprAritmetica;
	}
	
	public ParserRule getExprAritmeticaRule() {
		return getExprAritmeticaAccess().getRule();
	}
	
	//ExprLogica:
	//   (Negado ?= '!')? exprLog=(ExprLogicaOperadores | Luna | ExprComparacion | XOR)
	//;
	public ExprLogicaElements getExprLogicaAccess() {
		return pExprLogica;
	}
	
	public ParserRule getExprLogicaRule() {
		return getExprLogicaAccess().getRule();
	}
	
	//ExprLogicaOperadores:
	//    (('('(operadorLog = ( '&&' | '||' ) (exprLogs+=(Expresion))+) ')' ))
	//;
	public ExprLogicaOperadoresElements getExprLogicaOperadoresAccess() {
		return pExprLogicaOperadores;
	}
	
	public ParserRule getExprLogicaOperadoresRule() {
		return getExprLogicaOperadoresAccess().getRule();
	}
	
	//XOR:
	//    '('(operadorXOR = '$$' exprLogIzq=(Expresion) exprLogDer=(Expresion)) ')'
	//;
	public XORElements getXORAccess() {
		return pXOR;
	}
	
	public ParserRule getXORRule() {
		return getXORAccess().getRule();
	}
	
	//ExprComparacion:
	//    '('(operadorComp = ('<' | '>' | '<=' | '>=' | '==' | '~=') exprComIzq=(Expresion) exprComDer=(Expresion)) ')'
	//;
	public ExprComparacionElements getExprComparacionAccess() {
		return pExprComparacion;
	}
	
	public ParserRule getExprComparacionRule() {
		return getExprComparacionAccess().getRule();
	}
	
	//Primitivo:
	//    tipo = ('Planeta' | 'Constelacion' | 'Estrella' | 'PolvoEstelar' | 'Luna')
	//;
	public PrimitivoElements getPrimitivoAccess() {
		return pPrimitivo;
	}
	
	public ParserRule getPrimitivoRule() {
		return getPrimitivoAccess().getRule();
	}
	
	//TipoFuncionOrdenSuperior:
	//    (ordenSuperiorTipo = '(' (paramFunc+=(Objeto) ('$' paramFunc+=Objeto)*)? ')' | Objeto)
	//    (returnTipoFunc ?= '->' returnFunc=(Primitivo) )?
	//;
	public TipoFuncionOrdenSuperiorElements getTipoFuncionOrdenSuperiorAccess() {
		return pTipoFuncionOrdenSuperior;
	}
	
	public ParserRule getTipoFuncionOrdenSuperiorRule() {
		return getTipoFuncionOrdenSuperiorAccess().getRule();
	}
	
	//Planeta: /* int */
	//    x = INT
	//;
	public PlanetaElements getPlanetaAccess() {
		return pPlaneta;
	}
	
	public ParserRule getPlanetaRule() {
		return getPlanetaAccess().getRule();
	}
	
	//Constelacion: /* string */
	//    x = STRING
	//;
	public ConstelacionElements getConstelacionAccess() {
		return pConstelacion;
	}
	
	public ParserRule getConstelacionRule() {
		return getConstelacionAccess().getRule();
	}
	
	//terminal CHAR: /* char */
	//    '"' ( '\\' . | !('\\'|'"') ) '"' |
	//    "'" ( '\\' . | !('\\'|"'") ) "'"
	//;
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//Estrella:
	//    x = CHAR
	//;
	public EstrellaElements getEstrellaAccess() {
		return pEstrella;
	}
	
	public ParserRule getEstrellaRule() {
		return getEstrellaAccess().getRule();
	}
	
	//PolvoEstelar:
	//    x = Double
	//;
	public PolvoEstelarElements getPolvoEstelarAccess() {
		return pPolvoEstelar;
	}
	
	public ParserRule getPolvoEstelarRule() {
		return getPolvoEstelarAccess().getRule();
	}
	
	//Double returns ecore::EDouble:
	//    INT '.' INT
	//;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Luna:
	//    x = ('LunaNueva' | 'LunaLlena')
	//;
	public LunaElements getLunaAccess() {
		return pLuna;
	}
	
	public ParserRule getLunaRule() {
		return getLunaAccess().getRule();
	}
	
	//CalistoMapTipo: //mapa -> entrada con la declaracion de tipos
	//     'Calisto' '[' (tipoIzq=Primitivo '$' tipoDer=Primitivo) ']'
	// ;
	public CalistoMapTipoElements getCalistoMapTipoAccess() {
		return pCalistoMapTipo;
	}
	
	public ParserRule getCalistoMapTipoRule() {
		return getCalistoMapTipoAccess().getRule();
	}
	
	//CalistoMapValor: //mapa -> salida con tipos asignados
	//     {CalistoMapValor} 'Calisto' '(' ((key+=Expresion '->' value+=Expresion) ('$' key+=Expresion '->' value+=Expresion)*)? ')'
	//;
	public CalistoMapValorElements getCalistoMapValorAccess() {
		return pCalistoMapValor;
	}
	
	public ParserRule getCalistoMapValorRule() {
		return getCalistoMapValorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
