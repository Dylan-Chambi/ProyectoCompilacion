/*
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DymeLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASIMIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCONSUMEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_3_0_0 = (RuleCall)cParamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDollarSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_1_1_0 = (RuleCall)cParamAssignment_3_1_1.eContents().get(0);
		private final Keyword cCONVERGEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstrInstruccionParserRuleCall_5_0 = (RuleCall)cInstrAssignment_5.eContents().get(0);
		private final Keyword cGUTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTipAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTipTipoParserRuleCall_8_0 = (RuleCall)cTipAssignment_8.eContents().get(0);
		
		////Model:
		////    greetings+=Greeting*;
		////
		////Greeting:
		////    'Hello' name=ID '!';
		//Funcion:
		//    'CASIMIR' name=ID 'CONSUME' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//    (instr+=Instruccion)+
		//    "GUT" '->' tip=Tipo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CASIMIR' name=ID 'CONSUME' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
		//(instr+=Instruccion)+
		//"GUT" '->' tip=Tipo
		public Group getGroup() { return cGroup; }
		
		//'CASIMIR'
		public Keyword getCASIMIRKeyword_0() { return cCASIMIRKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'CONSUME'
		public Keyword getCONSUMEKeyword_2() { return cCONSUMEKeyword_2; }
		
		//(param+=Param ('$' param+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//param+=Param
		public Assignment getParamAssignment_3_0() { return cParamAssignment_3_0; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_0_0() { return cParamParamParserRuleCall_3_0_0; }
		
		//('$' param+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_3_1_0() { return cDollarSignKeyword_3_1_0; }
		
		//param+=Param
		public Assignment getParamAssignment_3_1_1() { return cParamAssignment_3_1_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_3_1_1_0() { return cParamParamParserRuleCall_3_1_1_0; }
		
		//'CONVERGE'
		public Keyword getCONVERGEKeyword_4() { return cCONVERGEKeyword_4; }
		
		//(instr+=Instruccion)+
		public Assignment getInstrAssignment_5() { return cInstrAssignment_5; }
		
		//Instruccion
		public RuleCall getInstrInstruccionParserRuleCall_5_0() { return cInstrInstruccionParserRuleCall_5_0; }
		
		//"GUT"
		public Keyword getGUTKeyword_6() { return cGUTKeyword_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//tip=Tipo
		public Assignment getTipAssignment_8() { return cTipAssignment_8; }
		
		//Tipo
		public RuleCall getTipTipoParserRuleCall_8_0() { return cTipTipoParserRuleCall_8_0; }
	}
	public class LlamadoFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.LlamadoFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFuncionFuncionCrossReference_0_0 = (CrossReference)cFuncionAssignment_0.eContents().get(0);
		private final RuleCall cFuncionFuncionIDTerminalRuleCall_0_0_1 = (RuleCall)cFuncionFuncionCrossReference_0_0.eContents().get(1);
		private final Keyword cCONSUMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpresionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cDollarSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpresionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		
		//LlamadoFunc:
		//    funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)?
		public Group getGroup() { return cGroup; }
		
		//funcion=[Funcion]
		public Assignment getFuncionAssignment_0() { return cFuncionAssignment_0; }
		
		//[Funcion]
		public CrossReference getFuncionFuncionCrossReference_0_0() { return cFuncionFuncionCrossReference_0_0; }
		
		//ID
		public RuleCall getFuncionFuncionIDTerminalRuleCall_0_0_1() { return cFuncionFuncionIDTerminalRuleCall_0_0_1; }
		
		//'CONSUME'
		public Keyword getCONSUMEKeyword_1() { return cCONSUMEKeyword_1; }
		
		//(args+=Expresion ('$' args+=Expresion)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_2_0_0() { return cArgsExpresionParserRuleCall_2_0_0; }
		
		//('$' args+=Expresion)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_2_1_0() { return cDollarSignKeyword_2_1_0; }
		
		//args+=Expresion
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expresion
		public RuleCall getArgsExpresionParserRuleCall_2_1_1_0() { return cArgsExpresionParserRuleCall_2_1_1_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipTipoParserRuleCall_2_0 = (RuleCall)cTipAssignment_2.eContents().get(0);
		
		//Param:
		//    name=ID 'es' tip=Tipo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'es' tip=Tipo
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'es'
		public Keyword getEsKeyword_1() { return cEsKeyword_1; }
		
		//tip=Tipo
		public Assignment getTipAssignment_2() { return cTipAssignment_2; }
		
		//Tipo
		public RuleCall getTipTipoParserRuleCall_2_0() { return cTipTipoParserRuleCall_2_0; }
	}
	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlanetaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Tipo:
		//    'Planeta' | 'STRING'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Planeta' | 'STRING'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Planeta'
		public Keyword getPlanetaKeyword_0() { return cPlanetaKeyword_0; }
		
		//'STRING'
		public Keyword getSTRINGKeyword_1() { return cSTRINGKeyword_1; }
	}
	public class InstruccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Instruccion");
		private final RuleCall cAsignacionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Instruccion:
		//    Asignacion /*Falta */
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Asignacion
		public RuleCall getAsignacionParserRuleCall() { return cAsignacionParserRuleCall; }
	}
	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Asignacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMASAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTipTipoParserRuleCall_2_1_0 = (RuleCall)cTipAssignment_2_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValorExpresionParserRuleCall_4_0 = (RuleCall)cValorAssignment_4.eContents().get(0);
		
		//Asignacion:
		//    'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion
		public Group getGroup() { return cGroup; }
		
		//'MASA'
		public Keyword getMASAKeyword_0() { return cMASAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('es' tip=Tipo)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'es'
		public Keyword getEsKeyword_2_0() { return cEsKeyword_2_0; }
		
		//tip=Tipo
		public Assignment getTipAssignment_2_1() { return cTipAssignment_2_1; }
		
		//Tipo
		public RuleCall getTipTipoParserRuleCall_2_1_0() { return cTipTipoParserRuleCall_2_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3() { return cLessThanSignHyphenMinusKeyword_3; }
		
		//valor=Expresion
		public Assignment getValorAssignment_4() { return cValorAssignment_4; }
		
		//Expresion
		public RuleCall getValorExpresionParserRuleCall_4_0() { return cValorExpresionParserRuleCall_4_0; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLlamadoFuncParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expresion:
		//    Suma | ExprSimple | LlamadoFunc
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Suma | ExprSimple | LlamadoFunc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Suma
		public RuleCall getSumaParserRuleCall_0() { return cSumaParserRuleCall_0; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_1() { return cExprSimpleParserRuleCall_1; }
		
		//LlamadoFunc
		public RuleCall getLlamadoFuncParserRuleCall_2() { return cLlamadoFuncParserRuleCall_2; }
	}
	public class SumaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Suma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIzqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIzqExprSimpleParserRuleCall_0_0 = (RuleCall)cIzqAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDerExprSimpleParserRuleCall_2_0 = (RuleCall)cDerAssignment_2.eContents().get(0);
		
		//Suma:
		//    izq=ExprSimple '+' der=ExprSimple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//izq=ExprSimple '+' der=ExprSimple
		public Group getGroup() { return cGroup; }
		
		//izq=ExprSimple
		public Assignment getIzqAssignment_0() { return cIzqAssignment_0; }
		
		//ExprSimple
		public RuleCall getIzqExprSimpleParserRuleCall_0_0() { return cIzqExprSimpleParserRuleCall_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//der=ExprSimple
		public Assignment getDerAssignment_2() { return cDerAssignment_2; }
		
		//ExprSimple
		public RuleCall getDerExprSimpleParserRuleCall_2_0() { return cDerExprSimpleParserRuleCall_2_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cXSTRINGTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPPlanetaParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		
		//ExprSimple:
		//    x = STRING | p = Planeta
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x = STRING | p = Planeta
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//x = STRING
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//STRING
		public RuleCall getXSTRINGTerminalRuleCall_0_0() { return cXSTRINGTerminalRuleCall_0_0; }
		
		//p = Planeta
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Planeta
		public RuleCall getPPlanetaParserRuleCall_1_0() { return cPPlanetaParserRuleCall_1_0; }
	}
	public class PlanetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.DymeLanguage.Planeta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDigitOneKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDigitTwoKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDigitThreeKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDigitFourKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cDigitFiveKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cDigitSixKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cDigitSevenKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cDigitEightKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cDigitNineKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDigitZeroKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDigitOneKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cDigitTwoKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDigitThreeKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cDigitFourKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cDigitFiveKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cDigitSixKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cDigitSevenKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cDigitEightKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cDigitNineKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		
		//Planeta:
		//    ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
		//    ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
		//('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*
		public Group getGroup() { return cGroup; }
		
		//('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_0_0() { return cDigitOneKeyword_0_0; }
		
		//'2'
		public Keyword getDigitTwoKeyword_0_1() { return cDigitTwoKeyword_0_1; }
		
		//'3'
		public Keyword getDigitThreeKeyword_0_2() { return cDigitThreeKeyword_0_2; }
		
		//'4'
		public Keyword getDigitFourKeyword_0_3() { return cDigitFourKeyword_0_3; }
		
		//'5'
		public Keyword getDigitFiveKeyword_0_4() { return cDigitFiveKeyword_0_4; }
		
		//'6'
		public Keyword getDigitSixKeyword_0_5() { return cDigitSixKeyword_0_5; }
		
		//'7'
		public Keyword getDigitSevenKeyword_0_6() { return cDigitSevenKeyword_0_6; }
		
		//'8'
		public Keyword getDigitEightKeyword_0_7() { return cDigitEightKeyword_0_7; }
		
		//'9'
		public Keyword getDigitNineKeyword_0_8() { return cDigitNineKeyword_0_8; }
		
		//('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'0'
		public Keyword getDigitZeroKeyword_1_0() { return cDigitZeroKeyword_1_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_1_1() { return cDigitOneKeyword_1_1; }
		
		//'2'
		public Keyword getDigitTwoKeyword_1_2() { return cDigitTwoKeyword_1_2; }
		
		//'3'
		public Keyword getDigitThreeKeyword_1_3() { return cDigitThreeKeyword_1_3; }
		
		//'4'
		public Keyword getDigitFourKeyword_1_4() { return cDigitFourKeyword_1_4; }
		
		//'5'
		public Keyword getDigitFiveKeyword_1_5() { return cDigitFiveKeyword_1_5; }
		
		//'6'
		public Keyword getDigitSixKeyword_1_6() { return cDigitSixKeyword_1_6; }
		
		//'7'
		public Keyword getDigitSevenKeyword_1_7() { return cDigitSevenKeyword_1_7; }
		
		//'8'
		public Keyword getDigitEightKeyword_1_8() { return cDigitEightKeyword_1_8; }
		
		//'9'
		public Keyword getDigitNineKeyword_1_9() { return cDigitNineKeyword_1_9; }
	}
	
	
	private final FuncionElements pFuncion;
	private final LlamadoFuncElements pLlamadoFunc;
	private final ParamElements pParam;
	private final TipoElements pTipo;
	private final InstruccionElements pInstruccion;
	private final AsignacionElements pAsignacion;
	private final ExpresionElements pExpresion;
	private final SumaElements pSuma;
	private final ExprSimpleElements pExprSimple;
	private final PlanetaElements pPlaneta;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DymeLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFuncion = new FuncionElements();
		this.pLlamadoFunc = new LlamadoFuncElements();
		this.pParam = new ParamElements();
		this.pTipo = new TipoElements();
		this.pInstruccion = new InstruccionElements();
		this.pAsignacion = new AsignacionElements();
		this.pExpresion = new ExpresionElements();
		this.pSuma = new SumaElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pPlaneta = new PlanetaElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.DymeLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////    greetings+=Greeting*;
	////
	////Greeting:
	////    'Hello' name=ID '!';
	//Funcion:
	//    'CASIMIR' name=ID 'CONSUME' (param+=Param ('$' param+=Param)*)? 'CONVERGE'
	//    (instr+=Instruccion)+
	//    "GUT" '->' tip=Tipo
	//;
	public FuncionElements getFuncionAccess() {
		return pFuncion;
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}
	
	//LlamadoFunc:
	//    funcion=[Funcion] 'CONSUME' (args+=Expresion ('$' args+=Expresion)*)?
	//;
	public LlamadoFuncElements getLlamadoFuncAccess() {
		return pLlamadoFunc;
	}
	
	public ParserRule getLlamadoFuncRule() {
		return getLlamadoFuncAccess().getRule();
	}
	
	//Param:
	//    name=ID 'es' tip=Tipo
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Tipo:
	//    'Planeta' | 'STRING'
	//;
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}
	
	//Instruccion:
	//    Asignacion /*Falta */
	//;
	public InstruccionElements getInstruccionAccess() {
		return pInstruccion;
	}
	
	public ParserRule getInstruccionRule() {
		return getInstruccionAccess().getRule();
	}
	
	//Asignacion:
	//    'MASA' name=ID ('es' tip=Tipo)?  '<-' valor=Expresion
	//;
	public AsignacionElements getAsignacionAccess() {
		return pAsignacion;
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}
	
	//Expresion:
	//    Suma | ExprSimple | LlamadoFunc
	//;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//Suma:
	//    izq=ExprSimple '+' der=ExprSimple
	//;
	public SumaElements getSumaAccess() {
		return pSuma;
	}
	
	public ParserRule getSumaRule() {
		return getSumaAccess().getRule();
	}
	
	//ExprSimple:
	//    x = STRING | p = Planeta
	//;
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//Planeta:
	//    ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
	//    ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')*
	//;
	public PlanetaElements getPlanetaAccess() {
		return pPlaneta;
	}
	
	public ParserRule getPlanetaRule() {
		return getPlanetaAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
