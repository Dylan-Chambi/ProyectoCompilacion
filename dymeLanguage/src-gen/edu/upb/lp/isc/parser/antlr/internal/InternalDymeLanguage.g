/*
 * generated by Xtext 2.26.0
 */
grammar InternalDymeLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.upb.lp.isc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.isc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.isc.services.DymeLanguageGrammarAccess;

}

@parser::members {

 	private DymeLanguageGrammarAccess grammarAccess;

    public InternalDymeLanguageParser(TokenStream input, DymeLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Funcion";
   	}

   	@Override
   	protected DymeLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFuncion
entryRuleFuncion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncionRule()); }
	iv_ruleFuncion=ruleFuncion
	{ $current=$iv_ruleFuncion.current; }
	EOF;

// Rule Funcion
ruleFuncion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CASIMIR'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuncionAccess().getCASIMIRKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuncionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='CONSUME'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuncionAccess().getCONSUMEKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFuncionAccess().getParamParamParserRuleCall_3_0_0());
					}
					lv_param_3_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuncionRule());
						}
						add(
							$current,
							"param",
							lv_param_3_0,
							"edu.upb.lp.isc.DymeLanguage.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4='$'
				{
					newLeafNode(otherlv_4, grammarAccess.getFuncionAccess().getDollarSignKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFuncionAccess().getParamParamParserRuleCall_3_1_1_0());
						}
						lv_param_5_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFuncionRule());
							}
							add(
								$current,
								"param",
								lv_param_5_0,
								"edu.upb.lp.isc.DymeLanguage.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='CONVERGE'
		{
			newLeafNode(otherlv_6, grammarAccess.getFuncionAccess().getCONVERGEKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncionAccess().getInstrInstruccionParserRuleCall_5_0());
				}
				lv_instr_7_0=ruleInstruccion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncionRule());
					}
					add(
						$current,
						"instr",
						lv_instr_7_0,
						"edu.upb.lp.isc.DymeLanguage.Instruccion");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='GUT'
		{
			newLeafNode(otherlv_8, grammarAccess.getFuncionAccess().getGUTKeyword_6());
		}
		otherlv_9='->'
		{
			newLeafNode(otherlv_9, grammarAccess.getFuncionAccess().getHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncionAccess().getTipTipoParserRuleCall_8_0());
				}
				lv_tip_10_0=ruleTipo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncionRule());
					}
					set(
						$current,
						"tip",
						lv_tip_10_0,
						"edu.upb.lp.isc.DymeLanguage.Tipo");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLlamadoFunc
entryRuleLlamadoFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLlamadoFuncRule()); }
	iv_ruleLlamadoFunc=ruleLlamadoFunc
	{ $current=$iv_ruleLlamadoFunc.current; }
	EOF;

// Rule LlamadoFunc
ruleLlamadoFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLlamadoFuncRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getLlamadoFuncAccess().getFuncionFuncionCrossReference_0_0());
				}
			)
		)
		otherlv_1='CONSUME'
		{
			newLeafNode(otherlv_1, grammarAccess.getLlamadoFuncAccess().getCONSUMEKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLlamadoFuncAccess().getArgsExpresionParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleExpresion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLlamadoFuncRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"edu.upb.lp.isc.DymeLanguage.Expresion");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3='$'
				{
					newLeafNode(otherlv_3, grammarAccess.getLlamadoFuncAccess().getDollarSignKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLlamadoFuncAccess().getArgsExpresionParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleExpresion
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLlamadoFuncRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"edu.upb.lp.isc.DymeLanguage.Expresion");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='es'
		{
			newLeafNode(otherlv_1, grammarAccess.getParamAccess().getEsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAccess().getTipTipoParserRuleCall_2_0());
				}
				lv_tip_2_0=ruleTipo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamRule());
					}
					set(
						$current,
						"tip",
						lv_tip_2_0,
						"edu.upb.lp.isc.DymeLanguage.Tipo");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTipo
entryRuleTipo returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTipoRule()); }
	iv_ruleTipo=ruleTipo
	{ $current=$iv_ruleTipo.current.getText(); }
	EOF;

// Rule Tipo
ruleTipo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Planeta'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTipoAccess().getPlanetaKeyword_0());
		}
		    |
		kw='STRING'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTipoAccess().getSTRINGKeyword_1());
		}
	)
;

// Entry rule entryRuleInstruccion
entryRuleInstruccion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstruccionRule()); }
	iv_ruleInstruccion=ruleInstruccion
	{ $current=$iv_ruleInstruccion.current; }
	EOF;

// Rule Instruccion
ruleInstruccion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInstruccionAccess().getAsignacionParserRuleCall());
	}
	this_Asignacion_0=ruleAsignacion
	{
		$current = $this_Asignacion_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAsignacion
entryRuleAsignacion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsignacionRule()); }
	iv_ruleAsignacion=ruleAsignacion
	{ $current=$iv_ruleAsignacion.current; }
	EOF;

// Rule Asignacion
ruleAsignacion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MASA'
		{
			newLeafNode(otherlv_0, grammarAccess.getAsignacionAccess().getMASAKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAsignacionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAsignacionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='es'
			{
				newLeafNode(otherlv_2, grammarAccess.getAsignacionAccess().getEsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAsignacionAccess().getTipTipoParserRuleCall_2_1_0());
					}
					lv_tip_3_0=ruleTipo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAsignacionRule());
						}
						set(
							$current,
							"tip",
							lv_tip_3_0,
							"edu.upb.lp.isc.DymeLanguage.Tipo");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='<-'
		{
			newLeafNode(otherlv_4, grammarAccess.getAsignacionAccess().getLessThanSignHyphenMinusKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAsignacionAccess().getValorExpresionParserRuleCall_4_0());
				}
				lv_valor_5_0=ruleExpresion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsignacionRule());
					}
					set(
						$current,
						"valor",
						lv_valor_5_0,
						"edu.upb.lp.isc.DymeLanguage.Expresion");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpresion
entryRuleExpresion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpresionRule()); }
	iv_ruleExpresion=ruleExpresion
	{ $current=$iv_ruleExpresion.current; }
	EOF;

// Rule Expresion
ruleExpresion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpresionAccess().getSumaParserRuleCall_0());
		}
		this_Suma_0=ruleSuma
		{
			$current = $this_Suma_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpresionAccess().getExprSimpleParserRuleCall_1());
		}
		this_ExprSimple_1=ruleExprSimple
		{
			$current = $this_ExprSimple_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpresionAccess().getLlamadoFuncParserRuleCall_2());
		}
		this_LlamadoFunc_2=ruleLlamadoFunc
		{
			$current = $this_LlamadoFunc_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSuma
entryRuleSuma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumaRule()); }
	iv_ruleSuma=ruleSuma
	{ $current=$iv_ruleSuma.current; }
	EOF;

// Rule Suma
ruleSuma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSumaAccess().getIzqExprSimpleParserRuleCall_0_0());
				}
				lv_izq_0_0=ruleExprSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumaRule());
					}
					set(
						$current,
						"izq",
						lv_izq_0_0,
						"edu.upb.lp.isc.DymeLanguage.ExprSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='+'
		{
			newLeafNode(otherlv_1, grammarAccess.getSumaAccess().getPlusSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumaAccess().getDerExprSimpleParserRuleCall_2_0());
				}
				lv_der_2_0=ruleExprSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumaRule());
					}
					set(
						$current,
						"der",
						lv_der_2_0,
						"edu.upb.lp.isc.DymeLanguage.ExprSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	iv_ruleExprSimple=ruleExprSimple
	{ $current=$iv_ruleExprSimple.current; }
	EOF;

// Rule ExprSimple
ruleExprSimple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_x_0_0=RULE_STRING
				{
					newLeafNode(lv_x_0_0, grammarAccess.getExprSimpleAccess().getXSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleAccess().getPPlanetaParserRuleCall_1_0());
				}
				lv_p_1_0=rulePlaneta
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
					}
					set(
						$current,
						"p",
						lv_p_1_0,
						"edu.upb.lp.isc.DymeLanguage.Planeta");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePlaneta
entryRulePlaneta returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPlanetaRule()); }
	iv_rulePlaneta=rulePlaneta
	{ $current=$iv_rulePlaneta.current.getText(); }
	EOF;

// Rule Planeta
rulePlaneta returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitOneKeyword_0_0());
			}
			    |
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitTwoKeyword_0_1());
			}
			    |
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitThreeKeyword_0_2());
			}
			    |
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitFourKeyword_0_3());
			}
			    |
			kw='5'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitFiveKeyword_0_4());
			}
			    |
			kw='6'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitSixKeyword_0_5());
			}
			    |
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitSevenKeyword_0_6());
			}
			    |
			kw='8'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitEightKeyword_0_7());
			}
			    |
			kw='9'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitNineKeyword_0_8());
			}
		)
		(
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitZeroKeyword_1_0());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitOneKeyword_1_1());
			}
			    |
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitTwoKeyword_1_2());
			}
			    |
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitThreeKeyword_1_3());
			}
			    |
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitFourKeyword_1_4());
			}
			    |
			kw='5'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitFiveKeyword_1_5());
			}
			    |
			kw='6'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitSixKeyword_1_6());
			}
			    |
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitSevenKeyword_1_7());
			}
			    |
			kw='8'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitEightKeyword_1_8());
			}
			    |
			kw='9'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPlanetaAccess().getDigitNineKeyword_1_9());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
