/**
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.dymeLanguage.impl;

import edu.upb.lp.isc.dymeLanguage.Constante;
import edu.upb.lp.isc.dymeLanguage.DymeLanguagePackage;
import edu.upb.lp.isc.dymeLanguage.ExprMapOperaciones;
import edu.upb.lp.isc.dymeLanguage.Expresion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Map Operaciones</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprMapOperacionesImpl#getOperadorAdd <em>Operador Add</em>}</li>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprMapOperacionesImpl#getMapConst <em>Map Const</em>}</li>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprMapOperacionesImpl#getKey <em>Key</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprMapOperacionesImpl extends ValorImpl implements ExprMapOperaciones
{
  /**
   * The default value of the '{@link #getOperadorAdd() <em>Operador Add</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorAdd()
   * @generated
   * @ordered
   */
  protected static final String OPERADOR_ADD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperadorAdd() <em>Operador Add</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorAdd()
   * @generated
   * @ordered
   */
  protected String operadorAdd = OPERADOR_ADD_EDEFAULT;

  /**
   * The cached value of the '{@link #getMapConst() <em>Map Const</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapConst()
   * @generated
   * @ordered
   */
  protected Constante mapConst;

  /**
   * The cached value of the '{@link #getKey() <em>Key</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKey()
   * @generated
   * @ordered
   */
  protected EList<Expresion> key;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprMapOperacionesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DymeLanguagePackage.Literals.EXPR_MAP_OPERACIONES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperadorAdd()
  {
    return operadorAdd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperadorAdd(String newOperadorAdd)
  {
    String oldOperadorAdd = operadorAdd;
    operadorAdd = newOperadorAdd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_MAP_OPERACIONES__OPERADOR_ADD, oldOperadorAdd, operadorAdd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constante getMapConst()
  {
    return mapConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMapConst(Constante newMapConst, NotificationChain msgs)
  {
    Constante oldMapConst = mapConst;
    mapConst = newMapConst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST, oldMapConst, newMapConst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMapConst(Constante newMapConst)
  {
    if (newMapConst != mapConst)
    {
      NotificationChain msgs = null;
      if (mapConst != null)
        msgs = ((InternalEObject)mapConst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST, null, msgs);
      if (newMapConst != null)
        msgs = ((InternalEObject)newMapConst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST, null, msgs);
      msgs = basicSetMapConst(newMapConst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST, newMapConst, newMapConst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expresion> getKey()
  {
    if (key == null)
    {
      key = new EObjectContainmentEList<Expresion>(Expresion.class, this, DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY);
    }
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST:
        return basicSetMapConst(null, msgs);
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY:
        return ((InternalEList<?>)getKey()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__OPERADOR_ADD:
        return getOperadorAdd();
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST:
        return getMapConst();
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY:
        return getKey();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__OPERADOR_ADD:
        setOperadorAdd((String)newValue);
        return;
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST:
        setMapConst((Constante)newValue);
        return;
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY:
        getKey().clear();
        getKey().addAll((Collection<? extends Expresion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__OPERADOR_ADD:
        setOperadorAdd(OPERADOR_ADD_EDEFAULT);
        return;
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST:
        setMapConst((Constante)null);
        return;
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY:
        getKey().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__OPERADOR_ADD:
        return OPERADOR_ADD_EDEFAULT == null ? operadorAdd != null : !OPERADOR_ADD_EDEFAULT.equals(operadorAdd);
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__MAP_CONST:
        return mapConst != null;
      case DymeLanguagePackage.EXPR_MAP_OPERACIONES__KEY:
        return key != null && !key.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operadorAdd: ");
    result.append(operadorAdd);
    result.append(')');
    return result.toString();
  }

} //ExprMapOperacionesImpl
