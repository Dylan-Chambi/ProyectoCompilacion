/**
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.dymeLanguage.impl;

import edu.upb.lp.isc.dymeLanguage.DymeLanguagePackage;
import edu.upb.lp.isc.dymeLanguage.ExprLogica;
import edu.upb.lp.isc.dymeLanguage.Expresion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Logica</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprLogicaImpl#getOperadorLog <em>Operador Log</em>}</li>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprLogicaImpl#getExprLog <em>Expr Log</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprLogicaImpl extends ExpresionImpl implements ExprLogica
{
  /**
   * The default value of the '{@link #getOperadorLog() <em>Operador Log</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorLog()
   * @generated
   * @ordered
   */
  protected static final String OPERADOR_LOG_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperadorLog() <em>Operador Log</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorLog()
   * @generated
   * @ordered
   */
  protected String operadorLog = OPERADOR_LOG_EDEFAULT;

  /**
   * The cached value of the '{@link #getExprLog() <em>Expr Log</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprLog()
   * @generated
   * @ordered
   */
  protected EList<Expresion> exprLog;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprLogicaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DymeLanguagePackage.Literals.EXPR_LOGICA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperadorLog()
  {
    return operadorLog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperadorLog(String newOperadorLog)
  {
    String oldOperadorLog = operadorLog;
    operadorLog = newOperadorLog;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_LOGICA__OPERADOR_LOG, oldOperadorLog, operadorLog));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expresion> getExprLog()
  {
    if (exprLog == null)
    {
      exprLog = new EObjectContainmentEList<Expresion>(Expresion.class, this, DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG);
    }
    return exprLog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG:
        return ((InternalEList<?>)getExprLog()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_LOGICA__OPERADOR_LOG:
        return getOperadorLog();
      case DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG:
        return getExprLog();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_LOGICA__OPERADOR_LOG:
        setOperadorLog((String)newValue);
        return;
      case DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG:
        getExprLog().clear();
        getExprLog().addAll((Collection<? extends Expresion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_LOGICA__OPERADOR_LOG:
        setOperadorLog(OPERADOR_LOG_EDEFAULT);
        return;
      case DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG:
        getExprLog().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_LOGICA__OPERADOR_LOG:
        return OPERADOR_LOG_EDEFAULT == null ? operadorLog != null : !OPERADOR_LOG_EDEFAULT.equals(operadorLog);
      case DymeLanguagePackage.EXPR_LOGICA__EXPR_LOG:
        return exprLog != null && !exprLog.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operadorLog: ");
    result.append(operadorLog);
    result.append(')');
    return result.toString();
  }

} //ExprLogicaImpl
