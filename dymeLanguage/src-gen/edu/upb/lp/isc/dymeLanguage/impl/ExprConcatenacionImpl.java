/**
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.dymeLanguage.impl;

import edu.upb.lp.isc.dymeLanguage.DymeLanguagePackage;
import edu.upb.lp.isc.dymeLanguage.ExprConcatenacion;
import edu.upb.lp.isc.dymeLanguage.Expresion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Concatenacion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprConcatenacionImpl#getOperadorCon <em>Operador Con</em>}</li>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprConcatenacionImpl#getExprCon <em>Expr Con</em>}</li>
 *   <li>{@link edu.upb.lp.isc.dymeLanguage.impl.ExprConcatenacionImpl#getX <em>X</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprConcatenacionImpl extends ExpresionImpl implements ExprConcatenacion
{
  /**
   * The default value of the '{@link #getOperadorCon() <em>Operador Con</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorCon()
   * @generated
   * @ordered
   */
  protected static final String OPERADOR_CON_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperadorCon() <em>Operador Con</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperadorCon()
   * @generated
   * @ordered
   */
  protected String operadorCon = OPERADOR_CON_EDEFAULT;

  /**
   * The cached value of the '{@link #getExprCon() <em>Expr Con</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprCon()
   * @generated
   * @ordered
   */
  protected EList<Expresion> exprCon;

  /**
   * The default value of the '{@link #getX() <em>X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected static final String X_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getX() <em>X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected String x = X_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprConcatenacionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DymeLanguagePackage.Literals.EXPR_CONCATENACION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperadorCon()
  {
    return operadorCon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperadorCon(String newOperadorCon)
  {
    String oldOperadorCon = operadorCon;
    operadorCon = newOperadorCon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_CONCATENACION__OPERADOR_CON, oldOperadorCon, operadorCon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expresion> getExprCon()
  {
    if (exprCon == null)
    {
      exprCon = new EObjectContainmentEList<Expresion>(Expresion.class, this, DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON);
    }
    return exprCon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getX()
  {
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setX(String newX)
  {
    String oldX = x;
    x = newX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DymeLanguagePackage.EXPR_CONCATENACION__X, oldX, x));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON:
        return ((InternalEList<?>)getExprCon()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_CONCATENACION__OPERADOR_CON:
        return getOperadorCon();
      case DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON:
        return getExprCon();
      case DymeLanguagePackage.EXPR_CONCATENACION__X:
        return getX();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_CONCATENACION__OPERADOR_CON:
        setOperadorCon((String)newValue);
        return;
      case DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON:
        getExprCon().clear();
        getExprCon().addAll((Collection<? extends Expresion>)newValue);
        return;
      case DymeLanguagePackage.EXPR_CONCATENACION__X:
        setX((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_CONCATENACION__OPERADOR_CON:
        setOperadorCon(OPERADOR_CON_EDEFAULT);
        return;
      case DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON:
        getExprCon().clear();
        return;
      case DymeLanguagePackage.EXPR_CONCATENACION__X:
        setX(X_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DymeLanguagePackage.EXPR_CONCATENACION__OPERADOR_CON:
        return OPERADOR_CON_EDEFAULT == null ? operadorCon != null : !OPERADOR_CON_EDEFAULT.equals(operadorCon);
      case DymeLanguagePackage.EXPR_CONCATENACION__EXPR_CON:
        return exprCon != null && !exprCon.isEmpty();
      case DymeLanguagePackage.EXPR_CONCATENACION__X:
        return X_EDEFAULT == null ? x != null : !X_EDEFAULT.equals(x);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operadorCon: ");
    result.append(operadorCon);
    result.append(", x: ");
    result.append(x);
    result.append(')');
    return result.toString();
  }

} //ExprConcatenacionImpl
