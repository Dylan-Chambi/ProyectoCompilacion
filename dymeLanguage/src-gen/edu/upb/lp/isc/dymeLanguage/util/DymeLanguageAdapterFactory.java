/**
 * generated by Xtext 2.26.0
 */
package edu.upb.lp.isc.dymeLanguage.util;

import edu.upb.lp.isc.dymeLanguage.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.upb.lp.isc.dymeLanguage.DymeLanguagePackage
 * @generated
 */
public class DymeLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DymeLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DymeLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DymeLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DymeLanguageSwitch<Adapter> modelSwitch =
    new DymeLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter casePrograma(Programa object)
      {
        return createProgramaAdapter();
      }
      @Override
      public Adapter caseObjeto(Objeto object)
      {
        return createObjetoAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter caseInstrucciones(Instrucciones object)
      {
        return createInstruccionesAdapter();
      }
      @Override
      public Adapter caseEstrellaFugazMeteoro(EstrellaFugazMeteoro object)
      {
        return createEstrellaFugazMeteoroAdapter();
      }
      @Override
      public Adapter caseLlamadoFunc(LlamadoFunc object)
      {
        return createLlamadoFuncAdapter();
      }
      @Override
      public Adapter caseLlamadoMapa(LlamadoMapa object)
      {
        return createLlamadoMapaAdapter();
      }
      @Override
      public Adapter caseDeclaracion(Declaracion object)
      {
        return createDeclaracionAdapter();
      }
      @Override
      public Adapter caseFuncion(Funcion object)
      {
        return createFuncionAdapter();
      }
      @Override
      public Adapter caseAsignacion(Asignacion object)
      {
        return createAsignacionAdapter();
      }
      @Override
      public Adapter caseParam(Param object)
      {
        return createParamAdapter();
      }
      @Override
      public Adapter caseConstante(Constante object)
      {
        return createConstanteAdapter();
      }
      @Override
      public Adapter caseValor(Valor object)
      {
        return createValorAdapter();
      }
      @Override
      public Adapter caseExpresion(Expresion object)
      {
        return createExpresionAdapter();
      }
      @Override
      public Adapter caseExprMapOperaciones(ExprMapOperaciones object)
      {
        return createExprMapOperacionesAdapter();
      }
      @Override
      public Adapter caseMapAdd(MapAdd object)
      {
        return createMapAddAdapter();
      }
      @Override
      public Adapter caseMapRemove(MapRemove object)
      {
        return createMapRemoveAdapter();
      }
      @Override
      public Adapter caseExprConcatenacion(ExprConcatenacion object)
      {
        return createExprConcatenacionAdapter();
      }
      @Override
      public Adapter caseExprAritmetica(ExprAritmetica object)
      {
        return createExprAritmeticaAdapter();
      }
      @Override
      public Adapter caseExprLogica(ExprLogica object)
      {
        return createExprLogicaAdapter();
      }
      @Override
      public Adapter caseExprLogicaOperadores(ExprLogicaOperadores object)
      {
        return createExprLogicaOperadoresAdapter();
      }
      @Override
      public Adapter caseXOR(XOR object)
      {
        return createXORAdapter();
      }
      @Override
      public Adapter caseExprComparacion(ExprComparacion object)
      {
        return createExprComparacionAdapter();
      }
      @Override
      public Adapter casePrimitivo(Primitivo object)
      {
        return createPrimitivoAdapter();
      }
      @Override
      public Adapter caseTipoFuncionOrdenSuperior(TipoFuncionOrdenSuperior object)
      {
        return createTipoFuncionOrdenSuperiorAdapter();
      }
      @Override
      public Adapter casePlaneta(Planeta object)
      {
        return createPlanetaAdapter();
      }
      @Override
      public Adapter caseConstelacion(Constelacion object)
      {
        return createConstelacionAdapter();
      }
      @Override
      public Adapter caseEstrella(Estrella object)
      {
        return createEstrellaAdapter();
      }
      @Override
      public Adapter casePolvoEstelar(PolvoEstelar object)
      {
        return createPolvoEstelarAdapter();
      }
      @Override
      public Adapter caseLuna(Luna object)
      {
        return createLunaAdapter();
      }
      @Override
      public Adapter caseCalistoMapTipo(CalistoMapTipo object)
      {
        return createCalistoMapTipoAdapter();
      }
      @Override
      public Adapter caseCalistoMapValor(CalistoMapValor object)
      {
        return createCalistoMapValorAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Programa <em>Programa</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Programa
   * @generated
   */
  public Adapter createProgramaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Objeto <em>Objeto</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Objeto
   * @generated
   */
  public Adapter createObjetoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Instrucciones <em>Instrucciones</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Instrucciones
   * @generated
   */
  public Adapter createInstruccionesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.EstrellaFugazMeteoro <em>Estrella Fugaz Meteoro</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.EstrellaFugazMeteoro
   * @generated
   */
  public Adapter createEstrellaFugazMeteoroAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.LlamadoFunc <em>Llamado Func</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.LlamadoFunc
   * @generated
   */
  public Adapter createLlamadoFuncAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.LlamadoMapa <em>Llamado Mapa</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.LlamadoMapa
   * @generated
   */
  public Adapter createLlamadoMapaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Declaracion <em>Declaracion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Declaracion
   * @generated
   */
  public Adapter createDeclaracionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Funcion <em>Funcion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Funcion
   * @generated
   */
  public Adapter createFuncionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Asignacion <em>Asignacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Asignacion
   * @generated
   */
  public Adapter createAsignacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Param <em>Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Param
   * @generated
   */
  public Adapter createParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Constante <em>Constante</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Constante
   * @generated
   */
  public Adapter createConstanteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Valor <em>Valor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Valor
   * @generated
   */
  public Adapter createValorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Expresion <em>Expresion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Expresion
   * @generated
   */
  public Adapter createExpresionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprMapOperaciones <em>Expr Map Operaciones</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprMapOperaciones
   * @generated
   */
  public Adapter createExprMapOperacionesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.MapAdd <em>Map Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.MapAdd
   * @generated
   */
  public Adapter createMapAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.MapRemove <em>Map Remove</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.MapRemove
   * @generated
   */
  public Adapter createMapRemoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprConcatenacion <em>Expr Concatenacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprConcatenacion
   * @generated
   */
  public Adapter createExprConcatenacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprAritmetica <em>Expr Aritmetica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprAritmetica
   * @generated
   */
  public Adapter createExprAritmeticaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprLogica <em>Expr Logica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprLogica
   * @generated
   */
  public Adapter createExprLogicaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprLogicaOperadores <em>Expr Logica Operadores</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprLogicaOperadores
   * @generated
   */
  public Adapter createExprLogicaOperadoresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.XOR <em>XOR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.XOR
   * @generated
   */
  public Adapter createXORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.ExprComparacion <em>Expr Comparacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.ExprComparacion
   * @generated
   */
  public Adapter createExprComparacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Primitivo <em>Primitivo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Primitivo
   * @generated
   */
  public Adapter createPrimitivoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.TipoFuncionOrdenSuperior <em>Tipo Funcion Orden Superior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.TipoFuncionOrdenSuperior
   * @generated
   */
  public Adapter createTipoFuncionOrdenSuperiorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Planeta <em>Planeta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Planeta
   * @generated
   */
  public Adapter createPlanetaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Constelacion <em>Constelacion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Constelacion
   * @generated
   */
  public Adapter createConstelacionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Estrella <em>Estrella</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Estrella
   * @generated
   */
  public Adapter createEstrellaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.PolvoEstelar <em>Polvo Estelar</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.PolvoEstelar
   * @generated
   */
  public Adapter createPolvoEstelarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.Luna <em>Luna</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.Luna
   * @generated
   */
  public Adapter createLunaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.CalistoMapTipo <em>Calisto Map Tipo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.CalistoMapTipo
   * @generated
   */
  public Adapter createCalistoMapTipoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.upb.lp.isc.dymeLanguage.CalistoMapValor <em>Calisto Map Valor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.upb.lp.isc.dymeLanguage.CalistoMapValor
   * @generated
   */
  public Adapter createCalistoMapValorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DymeLanguageAdapterFactory
